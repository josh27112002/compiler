//Lexer para el compilador X-cuter

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\6\1\7\4\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\25\1\26\1\27\1\30\1\27\1\31\1\32\1\33"+
    "\1\34\1\35\2\0\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\56\1\67\1\70\1\71"+
    "\1\0\1\72\1\0\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\0\1\126"+
    "\7\0\1\3\73\0\1\56\7\0\1\56\3\0\1\56"+
    "\3\0\1\56\1\0\1\56\6\0\1\56\1\0\1\56"+
    "\4\0\1\56\7\0\1\56\3\0\1\56\3\0\1\56"+
    "\1\0\1\56\6\0\1\56\1\0\1\56\u012b\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\26\23\1\24\1\25\25\23"+
    "\1\26\1\27\1\30\1\31\1\32\1\0\1\2\3\0"+
    "\1\33\25\0\1\34\1\35\1\36\17\23\1\37\32\23"+
    "\1\40\16\23\1\41\14\23\1\41\1\23\1\42\1\40"+
    "\12\23\1\42\1\23\1\41\32\23\2\0\2\43\1\0"+
    "\1\44\71\0\75\23\2\40\24\23\1\41\2\23\1\45"+
    "\54\23\64\0\31\23\1\41\2\23\1\41\36\23\1\45"+
    "\30\23\1\42\6\23\34\0\25\23\1\41\10\23\1\45"+
    "\25\23\1\41\5\23\13\0\34\23\1\41\4\23\5\0"+
    "\20\23\2\0\11\23\1\0\10\23\1\0\4\23\1\0"+
    "\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\127\0\256\0\u0105\0\127\0\127\0\127"+
    "\0\127\0\127\0\u015c\0\127\0\u01b3\0\127\0\u020a\0\u0261"+
    "\0\u02b8\0\127\0\127\0\u030f\0\u0366\0\u03bd\0\u0414\0\u046b"+
    "\0\u04c2\0\u0519\0\u0570\0\u05c7\0\u061e\0\u0675\0\u06cc\0\u0723"+
    "\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6\0\u092d\0\u0984\0\u09db"+
    "\0\u0a32\0\u0a89\0\u0ae0\0\u0b37\0\127\0\127\0\u0b8e\0\u0be5"+
    "\0\u0c3c\0\u0c93\0\u0cea\0\u0d41\0\u0d98\0\u0def\0\u0e46\0\u0e9d"+
    "\0\u0ef4\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050\0\u10a7\0\u10fe\0\u1155"+
    "\0\u11ac\0\u1203\0\u125a\0\127\0\127\0\127\0\127\0\127"+
    "\0\u12b1\0\u1308\0\u135f\0\u13b6\0\u140d\0\127\0\u1464\0\u14bb"+
    "\0\u1512\0\u1569\0\u15c0\0\u1617\0\u166e\0\u16c5\0\u171c\0\u1773"+
    "\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u197d\0\u19d4\0\u1a2b"+
    "\0\u1a82\0\u1ad9\0\u1b30\0\127\0\127\0\u077a\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96"+
    "\0\u1eed\0\u1f44\0\u1f9b\0\u1ff2\0\u2049\0\u077a\0\u20a0\0\u20f7"+
    "\0\u214e\0\u21a5\0\u21fc\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af"+
    "\0\u2406\0\u245d\0\u24b4\0\u250b\0\u2562\0\u25b9\0\u2610\0\u2667"+
    "\0\u26be\0\u2715\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f"+
    "\0\u2976\0\u29cd\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80\0\u2bd7"+
    "\0\u2c2e\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a\0\u2de1\0\u2e38\0\u2e8f"+
    "\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb\0\u3042\0\u3099\0\u30f0\0\u3147"+
    "\0\u319e\0\u31f5\0\u324c\0\u32a3\0\u077a\0\u32fa\0\u3351\0\u077a"+
    "\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504\0\u355b\0\u35b2\0\u3609"+
    "\0\u3660\0\u36b7\0\u077a\0\u370e\0\u3765\0\u37bc\0\u3813\0\u386a"+
    "\0\u38c1\0\u3918\0\u396f\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22"+
    "\0\u3b79\0\u3bd0\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda"+
    "\0\u3e31\0\u3e88\0\u3edf\0\u3f36\0\u3f8d\0\u3fe4\0\u403b\0\u4092"+
    "\0\u40e9\0\127\0\u4140\0\u4197\0\127\0\u41ee\0\u4245\0\u429c"+
    "\0\u42f3\0\u434a\0\u43a1\0\u43f8\0\u444f\0\u44a6\0\u44fd\0\u4554"+
    "\0\u45ab\0\u4602\0\u4659\0\u46b0\0\u4707\0\u475e\0\u47b5\0\u480c"+
    "\0\u4863\0\u48ba\0\u4911\0\u4968\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4"+
    "\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20\0\u4c77\0\u4cce\0\u4d25\0\u4d7c"+
    "\0\u4dd3\0\u4e2a\0\u4e81\0\u4ed8\0\u4f2f\0\u4f86\0\u4fdd\0\u5034"+
    "\0\u508b\0\u50e2\0\u5139\0\u5190\0\u51e7\0\u523e\0\u5295\0\u52ec"+
    "\0\u5343\0\u539a\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u554d\0\u55a4"+
    "\0\u55fb\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805\0\u585c"+
    "\0\u58b3\0\u590a\0\u5961\0\u59b8\0\u5a0f\0\u5a66\0\u5abd\0\u5b14"+
    "\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e\0\u5d75\0\u5dcc"+
    "\0\u5e23\0\u5e7a\0\u5ed1\0\u5f28\0\u5f7f\0\u5fd6\0\u602d\0\u6084"+
    "\0\u60db\0\u6132\0\u6189\0\u61e0\0\u6237\0\u628e\0\u62e5\0\u633c"+
    "\0\u6393\0\u63ea\0\u6441\0\u6498\0\u64ef\0\u6546\0\u659d\0\u65f4"+
    "\0\u664b\0\u66a2\0\u66f9\0\u6750\0\u67a7\0\u67fe\0\u6855\0\u68ac"+
    "\0\u6903\0\u695a\0\u69b1\0\u6a08\0\u6a5f\0\u6ab6\0\u6b0d\0\u6b64"+
    "\0\u6bbb\0\u6c12\0\u6c69\0\u6cc0\0\u6d17\0\u6d6e\0\u6dc5\0\u6e1c"+
    "\0\u6e73\0\u6eca\0\u6f21\0\u6f78\0\u6fcf\0\u7026\0\u707d\0\u70d4"+
    "\0\u712b\0\u7182\0\u71d9\0\u7230\0\u077a\0\u7287\0\u72de\0\u7335"+
    "\0\u738c\0\u73e3\0\u743a\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed"+
    "\0\u7644\0\u769b\0\u76f2\0\u7749\0\u77a0\0\u77f7\0\u784e\0\u78a5"+
    "\0\u78fc\0\u7953\0\u79aa\0\u7a01\0\u7a58\0\u7aaf\0\u7b06\0\u7b5d"+
    "\0\u7bb4\0\u7c0b\0\u7c62\0\u7cb9\0\u7d10\0\u7d67\0\u7dbe\0\u7e15"+
    "\0\u7e6c\0\u7ec3\0\u7f1a\0\u7f71\0\u7fc8\0\u801f\0\u8076\0\u80cd"+
    "\0\u8124\0\u817b\0\u81d2\0\u8229\0\u8280\0\u82d7\0\u832e\0\u8385"+
    "\0\u83dc\0\u8433\0\u848a\0\u84e1\0\u8538\0\u858f\0\u85e6\0\u863d"+
    "\0\u8694\0\u86eb\0\u8742\0\u8799\0\u87f0\0\u8847\0\u889e\0\u88f5"+
    "\0\u894c\0\u89a3\0\u89fa\0\u8a51\0\u8aa8\0\u8aff\0\u8b56\0\u8bad"+
    "\0\u8c04\0\u8c5b\0\u8cb2\0\u8d09\0\u8d60\0\u8db7\0\u8e0e\0\u8e65"+
    "\0\u8ebc\0\u8f13\0\u8f6a\0\u8fc1\0\u9018\0\u906f\0\u90c6\0\u911d"+
    "\0\u9174\0\u91cb\0\u9222\0\u9279\0\u92d0\0\u9327\0\u937e\0\u93d5"+
    "\0\u942c\0\u9483\0\u94da\0\u9531\0\u9588\0\u95df\0\u9636\0\u968d"+
    "\0\u96e4\0\u973b\0\u9792\0\u97e9\0\u9840\0\u9897\0\u98ee\0\u9945"+
    "\0\u999c\0\u99f3\0\u9a4a\0\u9aa1\0\u9af8\0\u9b4f\0\u9ba6\0\u9bfd"+
    "\0\u9c54\0\u9cab\0\u9d02\0\u9d59\0\u9db0\0\u9e07\0\u9e5e\0\u9eb5"+
    "\0\u9f0c\0\u9f63\0\u9fba\0\ua011\0\ua068\0\ua0bf\0\ua116\0\ua16d"+
    "\0\ua1c4\0\ua21b\0\ua272\0\ua2c9\0\ua320\0\ua377\0\ua3ce\0\ua425"+
    "\0\ua47c\0\ua4d3\0\ua52a\0\ua581\0\ua5d8\0\ua62f\0\ua686\0\ua6dd"+
    "\0\ua734\0\ua78b\0\ua7e2\0\ua839\0\ua890\0\ua8e7\0\ua93e\0\ua995"+
    "\0\ua9ec\0\uaa43\0\uaa9a\0\uaaf1\0\uab48\0\uab9f\0\uabf6\0\uac4d"+
    "\0\uaca4\0\uacfb\0\uad52\0\uada9\0\uae00\0\uae57\0\uaeae\0\uaf05"+
    "\0\uaf5c\0\uafb3\0\ub00a\0\ub061\0\ub0b8\0\ub10f\0\ub166\0\ub1bd"+
    "\0\ub214\0\ub26b\0\ub2c2\0\ub319\0\ub370\0\ub3c7\0\ub41e\0\ub475"+
    "\0\ub4cc\0\ub523\0\ub57a\0\ub5d1\0\ub628\0\ub67f\0\ub6d6\0\ub72d"+
    "\0\ub784\0\ub7db\0\ub832\0\ub889\0\ub8e0\0\ub937\0\ub98e\0\ub9e5"+
    "\0\uba3c\0\uba93\0\ubaea\0\ubb41\0\ubb98\0\ubbef\0\ubc46\0\ubc9d"+
    "\0\ubcf4\0\ubd4b\0\ubda2\0\ubdf9\0\ube50\0\ubea7\0\ubefe\0\ubf55"+
    "\0\ubfac\0\uc003\0\uc05a\0\uc0b1\0\uc108\0\uc15f\0\uc1b6\0\uc20d"+
    "\0\uc264\0\uc2bb\0\uc312\0\uc369\0\uc3c0\0\uc417\0\uc46e\0\uc4c5"+
    "\0\uc51c\0\uc573\0\uc5ca\0\uc621\0\uc678\0\uc6cf\0\uc726\0\uc77d"+
    "\0\uc7d4\0\uc82b\0\uc882\0\uc8d9\0\uc930\0\uc987\0\uc9de\0\uca35"+
    "\0\uca8c\0\ucae3\0\ucb3a\0\ucb91\0\ucbe8\0\ucc3f\0\ucc96\0\ucced"+
    "\0\ucd44\0\ucd9b\0\ucdf2\0\uce49\0\ucea0\0\ucef7\0\ucf4e\0\ucfa5"+
    "\0\ucffc\0\ud053\0\ud0aa\0\ud101\0\ud158\0\ud1af\0\ud206\0\ud25d"+
    "\0\ud2b4\0\ud30b\0\ud362\0\ud3b9\0\ud410\0\ud467\0\ud4be\0\ud515"+
    "\0\ud56c\0\ud5c3\0\ud61a\0\ud671\0\ud6c8\0\ud71f\0\ud776\0\ud7cd"+
    "\0\ucd44\0\ud824\0\ud87b\0\ud8d2\0\ud929\0\ud980\0\ud9d7\0\uda2e"+
    "\0\uda85\0\udadc\0\udb33\0\udb8a\0\udbe1\0\udc38\0\udc8f\0\udce6"+
    "\0\udd3d\0\udd94\0\uddeb\0\ude42\0\ude99\0\udef0\0\udf47\0\udf9e"+
    "\0\udff5\0\ue04c\0\ue0a3\0\ue0fa\0\ue151\0\ue1a8\0\ue1ff\0\ue256"+
    "\0\ue2ad\0\ue304\0\ue35b\0\ue3b2\0\ue409\0\ue460\0\ue4b7\0\ue50e"+
    "\0\ue565\0\ue5bc\0\ue613\0\ue66a\0\ue6c1\0\ue718\0\ue76f\0\ue7c6"+
    "\0\ue81d\0\ue874\0\ue8cb\0\ue922\0\ue979\0\ue9d0\0\uea27\0\uea7e"+
    "\0\uead5\0\ueb2c\0\ueb83\0\uebda\0\uec31\0\uec88\0\uecdf\0\ued36"+
    "\0\ued8d\0\uede4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\7\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\41"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\2\41\1\55"+
    "\1\2\1\56\1\41\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\41\1\66\2\41\1\67\1\70\1\71"+
    "\1\72\1\73\1\41\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\41\1\104\1\105\131\0\1\3"+
    "\160\0\1\106\106\0\1\107\130\0\1\110\123\0\1\111"+
    "\4\0\1\112\47\0\1\113\55\0\1\114\126\0\1\114"+
    "\1\0\10\21\104\0\1\115\25\0\1\116\36\0\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\0\1\125\1\126"+
    "\1\0\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\41\0\1\144"+
    "\126\0\1\145\113\0\10\41\5\0\22\41\1\146\6\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\147\23\41"+
    "\1\146\3\0\33\41\23\0\10\41\5\0\16\41\1\150"+
    "\2\41\1\151\7\41\3\0\33\41\23\0\10\41\5\0"+
    "\4\41\1\152\3\41\1\153\20\41\3\0\33\41\23\0"+
    "\10\41\5\0\13\41\1\154\1\41\1\155\11\41\1\156"+
    "\1\41\3\0\33\41\23\0\10\41\5\0\16\41\1\157"+
    "\2\41\1\160\2\41\1\161\4\41\3\0\1\41\1\162"+
    "\31\41\23\0\10\41\5\0\16\41\1\163\2\41\1\164"+
    "\7\41\3\0\33\41\23\0\10\41\5\0\1\165\30\41"+
    "\3\0\33\41\23\0\10\41\5\0\5\41\1\166\7\41"+
    "\1\167\13\41\3\0\33\41\23\0\10\41\5\0\16\41"+
    "\1\170\12\41\3\0\33\41\23\0\10\41\5\0\31\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\171\11\41"+
    "\1\172\12\41\3\0\33\41\23\0\10\41\5\0\4\41"+
    "\1\173\24\41\3\0\33\41\23\0\10\41\5\0\24\41"+
    "\1\174\4\41\3\0\17\41\1\175\13\41\23\0\10\41"+
    "\5\0\15\41\1\146\3\41\1\176\2\41\1\177\4\41"+
    "\3\0\33\41\23\0\10\41\5\0\21\41\1\200\7\41"+
    "\3\0\33\41\23\0\10\41\5\0\10\41\1\201\5\41"+
    "\1\202\12\41\3\0\33\41\23\0\10\41\5\0\1\203"+
    "\3\41\1\204\24\41\3\0\33\41\23\0\10\41\5\0"+
    "\7\41\1\205\6\41\1\206\2\41\1\207\7\41\3\0"+
    "\22\41\1\210\10\41\23\0\10\41\5\0\17\41\1\211"+
    "\11\41\3\0\33\41\23\0\10\41\5\0\1\212\30\41"+
    "\3\0\33\41\23\0\10\41\5\0\1\213\6\41\1\214"+
    "\21\41\3\0\33\41\23\0\10\41\5\0\31\41\3\0"+
    "\2\41\1\215\11\41\1\216\1\41\1\217\3\41\1\220"+
    "\1\221\1\222\1\223\1\41\1\224\3\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\225\3\41\1\226\5\41"+
    "\1\227\2\41\1\230\6\41\1\231\1\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\232\6\41\1\233\3\41"+
    "\1\234\2\41\1\235\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\236\3\41\1\237\5\41\1\240\11\41"+
    "\1\241\1\41\23\0\10\41\5\0\31\41\3\0\14\41"+
    "\1\242\1\41\1\243\7\41\1\244\1\41\1\245\2\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\41\1\246\7\41"+
    "\1\247\2\41\1\250\2\41\1\251\2\41\1\252\2\41"+
    "\1\253\5\41\23\0\10\41\5\0\31\41\3\0\14\41"+
    "\1\254\2\41\1\223\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\6\41\1\255\6\41\1\256\1\257\4\41\1\260"+
    "\7\41\23\0\10\41\5\0\31\41\3\0\1\41\1\261"+
    "\3\41\1\262\11\41\1\263\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\17\41\1\264\5\41\1\265\5\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\266\3\41\1\267"+
    "\3\41\1\270\5\41\1\271\5\41\1\272\5\41\23\0"+
    "\10\41\5\0\31\41\3\0\6\41\1\273\11\41\1\274"+
    "\1\41\1\275\10\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\276\20\41\1\277\2\41\1\300\5\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\301\3\41\1\302"+
    "\25\41\23\0\10\41\5\0\31\41\3\0\5\41\1\303"+
    "\2\41\1\304\1\305\12\41\1\306\1\307\1\41\1\310"+
    "\1\41\1\311\1\41\23\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\312\2\41\1\313\6\41\1\273\2\41\1\314"+
    "\6\41\1\315\1\41\23\0\10\41\5\0\31\41\3\0"+
    "\16\41\1\316\4\41\1\317\7\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\320\7\41\1\321\5\41\1\322"+
    "\13\41\23\0\10\41\5\0\31\41\3\0\3\41\1\323"+
    "\4\41\1\324\1\325\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\326\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\327\21\41\2\0\13\111\1\330\113\111"+
    "\70\112\1\0\17\112\1\0\16\112\13\0\1\331\134\0"+
    "\1\332\7\333\137\0\1\334\122\0\1\335\36\0\1\143"+
    "\1\0\1\336\15\0\1\337\1\340\1\0\1\341\44\0"+
    "\1\335\35\0\1\342\2\0\1\343\7\0\1\344\2\0"+
    "\1\345\2\0\1\135\2\0\1\346\102\0\1\347\7\0"+
    "\1\350\5\0\1\351\110\0\1\352\2\0\1\135\1\353"+
    "\1\354\2\0\1\355\2\0\1\135\7\0\1\135\117\0"+
    "\1\356\122\0\1\357\5\0\1\360\37\0\5\135\50\0"+
    "\1\361\1\0\1\362\12\0\1\135\1\0\1\363\45\0"+
    "\1\335\42\0\1\364\6\0\1\365\1\366\112\0\1\367"+
    "\125\0\1\370\3\0\1\371\3\0\1\372\116\0\1\373"+
    "\3\0\1\374\122\0\1\375\15\0\1\376\111\0\1\377"+
    "\11\0\1\135\3\0\1\u0100\4\0\1\u0101\44\0\1\335"+
    "\35\0\1\u0102\7\0\1\u0103\10\0\1\u0104\47\0\1\335"+
    "\203\0\1\135\3\0\1\135\1\u0105\44\0\1\335\35\0"+
    "\1\u0106\1\0\1\u0107\1\0\1\u0108\7\0\1\u0109\1\0"+
    "\1\u010a\1\u010b\3\0\1\u010c\1\u010d\102\0\1\u010e\1\u010f"+
    "\1\0\1\135\1\u0110\1\u0111\1\0\1\u0112\1\u0113\10\0"+
    "\1\u0114\47\0\1\335\50\0\1\135\113\0\1\u0115\7\0"+
    "\1\u0116\117\0\1\u0115\53\0\10\41\5\0\6\41\1\u0117"+
    "\22\41\3\0\33\41\23\0\10\41\5\0\14\41\1\u0118"+
    "\14\41\3\0\33\41\23\0\10\41\5\0\16\41\1\u0119"+
    "\12\41\3\0\33\41\23\0\10\41\5\0\2\41\1\u011a"+
    "\10\41\1\u011b\15\41\3\0\33\41\23\0\10\41\5\0"+
    "\22\41\1\u011c\6\41\3\0\33\41\23\0\10\41\5\0"+
    "\22\41\1\u011d\6\41\3\0\33\41\23\0\10\41\5\0"+
    "\3\41\1\166\25\41\3\0\33\41\23\0\10\41\5\0"+
    "\2\41\1\u011e\1\41\1\u011f\3\41\1\u0120\20\41\3\0"+
    "\33\41\23\0\10\41\5\0\21\41\1\166\7\41\3\0"+
    "\33\41\23\0\10\41\5\0\16\41\1\u0121\12\41\3\0"+
    "\33\41\23\0\10\41\5\0\13\41\1\u0122\15\41\3\0"+
    "\33\41\23\0\10\41\5\0\31\41\3\0\14\41\1\u0123"+
    "\16\41\23\0\10\41\5\0\23\41\1\u0124\5\41\3\0"+
    "\33\41\23\0\10\41\5\0\16\41\1\u0125\12\41\3\0"+
    "\33\41\23\0\10\41\5\0\25\41\1\u0126\3\41\3\0"+
    "\33\41\23\0\10\41\5\0\15\41\1\u0127\4\41\1\u0128"+
    "\1\u0129\5\41\3\0\33\41\23\0\10\41\5\0\10\41"+
    "\1\u012a\20\41\3\0\33\41\23\0\10\41\5\0\5\41"+
    "\1\u012b\23\41\3\0\33\41\23\0\10\41\5\0\2\41"+
    "\1\u012c\13\41\1\u012d\12\41\3\0\33\41\23\0\10\41"+
    "\5\0\21\41\1\u012e\7\41\3\0\33\41\23\0\10\41"+
    "\5\0\13\41\1\u012f\15\41\3\0\33\41\23\0\10\41"+
    "\5\0\31\41\3\0\16\41\1\u0130\14\41\23\0\10\41"+
    "\5\0\3\41\1\u0127\25\41\3\0\33\41\23\0\10\41"+
    "\5\0\23\41\1\u0127\5\41\3\0\33\41\23\0\10\41"+
    "\5\0\10\41\1\u0131\20\41\3\0\33\41\23\0\10\41"+
    "\5\0\6\41\1\u0132\22\41\3\0\33\41\23\0\10\41"+
    "\5\0\13\41\1\u0133\15\41\3\0\33\41\23\0\10\41"+
    "\5\0\25\41\1\u0134\3\41\3\0\33\41\23\0\10\41"+
    "\5\0\13\41\1\u0135\7\41\1\146\5\41\3\0\33\41"+
    "\23\0\10\41\5\0\4\41\1\u0136\24\41\3\0\33\41"+
    "\23\0\10\41\5\0\17\41\1\146\11\41\3\0\33\41"+
    "\23\0\10\41\5\0\1\u0137\30\41\3\0\33\41\23\0"+
    "\10\41\5\0\31\41\3\0\25\41\1\u0130\5\41\23\0"+
    "\10\41\5\0\3\41\1\u0138\25\41\3\0\33\41\23\0"+
    "\10\41\5\0\13\41\1\u0139\15\41\3\0\33\41\23\0"+
    "\10\41\5\0\10\41\1\u013a\20\41\3\0\33\41\23\0"+
    "\10\41\5\0\4\41\1\u013b\3\41\1\u013c\20\41\3\0"+
    "\33\41\23\0\10\41\5\0\31\41\3\0\23\41\1\u013d"+
    "\7\41\23\0\10\41\5\0\31\41\3\0\11\41\1\u013e"+
    "\21\41\23\0\10\41\5\0\31\41\3\0\4\41\1\275"+
    "\26\41\23\0\10\41\5\0\31\41\3\0\7\41\1\u013f"+
    "\12\41\1\u0140\10\41\23\0\10\41\5\0\31\41\3\0"+
    "\15\41\1\255\5\41\1\u0141\5\41\1\u0142\1\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u0143\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0144\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\u0145\31\41\23\0"+
    "\10\41\5\0\31\41\3\0\7\41\1\u0146\23\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0147\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u0148\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0149\25\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u014a\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\23\41\1\u014b\1\u014c\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\41\1\u014d\31\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\41\1\u014e\31\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\u014f\14\41\1\u0150"+
    "\1\u0151\14\41\23\0\10\41\5\0\31\41\3\0\2\41"+
    "\1\u0152\1\u0153\2\41\1\u0154\5\41\1\u0155\16\41\23\0"+
    "\10\41\5\0\31\41\3\0\26\41\1\273\4\41\23\0"+
    "\10\41\5\0\31\41\3\0\25\41\1\u0156\1\41\1\u0157"+
    "\3\41\23\0\10\41\5\0\31\41\3\0\16\41\1\u0158"+
    "\14\41\23\0\10\41\5\0\31\41\3\0\11\41\1\u0159"+
    "\11\41\1\u014b\7\41\23\0\10\41\5\0\31\41\3\0"+
    "\4\41\1\273\20\41\1\u015a\5\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u015b\31\41\23\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\u015c\14\41\1\u015d\3\41\1\u015e"+
    "\6\41\23\0\10\41\5\0\31\41\3\0\14\41\1\u015f"+
    "\16\41\23\0\10\41\5\0\31\41\3\0\14\41\1\u0160"+
    "\1\41\1\u0161\14\41\23\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\u0162\13\41\23\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\255\10\41\23\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u0163\5\41\1\u0164\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\16\41\1\u0165\14\41\23\0\10\41\5\0"+
    "\31\41\3\0\17\41\1\u0166\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\20\41\1\u0167\12\41\23\0\10\41\5\0"+
    "\31\41\3\0\14\41\1\u0168\6\41\1\u0169\1\u016a\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\2\41\1\u016b\12\41"+
    "\1\u016c\15\41\23\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u016d\6\41\23\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\u016e\14\41\23\0\10\41\5\0\31\41\3\0\4\41"+
    "\1\273\26\41\23\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u016f\6\41\23\0\10\41\5\0\31\41\3\0\15\41"+
    "\1\u0170\6\41\1\u0171\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\27\41\1\255\3\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\273\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0172\10\41\1\u0173\5\41\1\275\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\14\41\1\u0174\16\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u0175\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\u0176\32\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u0177\17\41\1\u0178"+
    "\7\41\23\0\10\41\5\0\31\41\3\0\11\41\1\u0179"+
    "\5\41\1\u017a\13\41\23\0\10\41\5\0\31\41\3\0"+
    "\2\41\1\u017b\30\41\23\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u0123\21\41\23\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u017c\3\41\1\u017d\1\41\1\u017e\6\41\1\u017f"+
    "\1\u0180\2\41\1\u0181\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\273\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\u0182\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\7\41\1\u0183\22\41\1\u0184\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u0185\20\41\1\u0186\10\41\23\0"+
    "\10\41\5\0\31\41\3\0\20\41\1\u0187\12\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0188\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\16\41\1\u0189\14\41\23\0"+
    "\10\41\5\0\31\41\3\0\15\41\1\u018a\15\41\23\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u018b\3\41\1\u018c"+
    "\10\41\1\u018d\10\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u018e\23\41\1\u014b\3\41\1\255\1\41\23\0"+
    "\10\41\5\0\31\41\3\0\20\41\1\u018f\12\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0190\11\41\1\u0191"+
    "\1\u0192\6\41\23\0\10\41\5\0\31\41\3\0\11\41"+
    "\1\263\21\41\23\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\273\10\41\23\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\u0193\10\41\23\0\10\41\5\0\31\41\3\0\11\41"+
    "\1\u0194\2\41\1\u0195\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\10\41\1\u0196\22\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0197\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u0198\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\275\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0199\25\41\2\0\13\111\1\330\4\111"+
    "\1\3\106\111\70\0\1\u019a\57\0\10\333\152\0\1\u019b"+
    "\150\0\1\u019c\127\0\1\u019d\16\0\1\u019e\113\0\1\u019f"+
    "\121\0\1\u01a0\145\0\1\u01a1\114\0\1\135\5\0\1\135"+
    "\126\0\1\u01a2\113\0\1\u01a3\146\0\1\u01a4\120\0\1\u01a5"+
    "\1\0\1\u01a6\132\0\1\u01a1\106\0\1\u01a1\7\0\1\u01a7"+
    "\136\0\1\u01a8\116\0\1\135\7\0\1\u01a9\120\0\1\135"+
    "\111\0\1\u01aa\24\0\1\135\43\0\1\335\36\0\1\u01ab"+
    "\131\0\1\u01ac\1\0\1\u01ad\136\0\1\u01ae\2\0\1\u01af"+
    "\105\0\1\u01b0\147\0\1\u01b1\121\0\1\u01b2\133\0\1\u01b3"+
    "\113\0\1\135\137\0\1\u01b4\2\0\1\135\107\0\1\135"+
    "\124\0\1\u01b5\133\0\1\u01b6\62\0\1\335\52\0\1\u01b7"+
    "\121\0\1\354\6\0\1\135\1\0\1\u01b7\122\0\1\u01b8"+
    "\5\0\1\u01b9\130\0\1\135\123\0\1\u01ba\115\0\1\u01bb"+
    "\140\0\1\u01bc\126\0\1\u01bd\124\0\1\u01be\107\0\1\u01bf"+
    "\130\0\1\135\11\0\1\u01c0\111\0\1\u01a3\141\0\1\u01c1"+
    "\133\0\1\u01c2\107\0\1\u01a6\10\0\1\u01bb\113\0\1\u01c3"+
    "\152\0\1\u01c4\102\0\1\354\147\0\1\u01c5\6\0\1\u01c6"+
    "\77\0\1\135\12\0\1\u01c7\2\0\1\135\110\0\1\u01c6"+
    "\143\0\1\345\124\0\1\u01c8\12\0\1\u01c9\115\0\1\u01ca"+
    "\52\0\1\335\41\0\1\u01cb\136\0\1\u01a1\6\0\1\u01c6"+
    "\45\0\1\335\35\0\1\u01cc\147\0\1\135\110\0\1\u01cd"+
    "\51\0\10\41\5\0\10\41\1\u0136\20\41\3\0\33\41"+
    "\23\0\10\41\5\0\14\41\1\u01ce\14\41\3\0\33\41"+
    "\23\0\10\41\5\0\22\41\1\27\6\41\3\0\33\41"+
    "\23\0\10\41\5\0\13\41\1\u01cf\15\41\3\0\33\41"+
    "\23\0\10\41\5\0\4\41\1\u01d0\24\41\3\0\33\41"+
    "\23\0\10\41\5\0\23\41\1\u01d1\5\41\3\0\33\41"+
    "\23\0\10\41\5\0\4\41\1\166\3\41\1\u01d2\20\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\u01d3\24\41"+
    "\3\0\33\41\23\0\10\41\5\0\2\41\1\146\26\41"+
    "\3\0\33\41\23\0\10\41\5\0\23\41\1\166\5\41"+
    "\3\0\33\41\23\0\10\41\5\0\14\41\1\146\14\41"+
    "\3\0\33\41\23\0\10\41\5\0\13\41\1\146\15\41"+
    "\3\0\33\41\23\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u0130\7\41\23\0\10\41\5\0\16\41\1\166\12\41"+
    "\3\0\33\41\23\0\10\41\5\0\24\41\1\206\4\41"+
    "\3\0\33\41\23\0\10\41\5\0\10\41\1\u01d4\20\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\u01d5\24\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\u01d6\24\41"+
    "\3\0\33\41\23\0\10\41\5\0\16\41\1\146\12\41"+
    "\3\0\33\41\23\0\10\41\5\0\15\41\1\146\13\41"+
    "\3\0\33\41\23\0\10\41\5\0\23\41\1\146\5\41"+
    "\3\0\33\41\23\0\10\41\5\0\12\41\1\146\16\41"+
    "\3\0\33\41\23\0\10\41\5\0\17\41\1\166\11\41"+
    "\3\0\33\41\23\0\10\41\5\0\6\41\1\u01d7\22\41"+
    "\3\0\33\41\23\0\10\41\5\0\13\41\1\166\15\41"+
    "\3\0\33\41\23\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\260\25\41\23\0\10\41\5\0\15\41\1\u012b\13\41"+
    "\3\0\33\41\23\0\10\41\5\0\7\41\1\u012b\21\41"+
    "\3\0\33\41\23\0\10\41\5\0\13\41\1\u01d8\15\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\u01d9\24\41"+
    "\3\0\33\41\23\0\10\41\5\0\4\41\1\u01da\24\41"+
    "\3\0\33\41\23\0\10\41\5\0\15\41\1\166\13\41"+
    "\3\0\33\41\23\0\10\41\5\0\15\41\1\u01db\13\41"+
    "\3\0\33\41\23\0\10\41\5\0\1\u01d0\30\41\3\0"+
    "\33\41\23\0\10\41\5\0\24\41\1\u01dc\4\41\3\0"+
    "\33\41\23\0\10\41\5\0\23\41\1\u01dd\5\41\3\0"+
    "\33\41\23\0\10\41\5\0\15\41\1\166\3\41\1\u01d7"+
    "\7\41\3\0\33\41\23\0\10\41\5\0\13\41\1\u01de"+
    "\15\41\3\0\33\41\23\0\10\41\5\0\31\41\3\0"+
    "\24\41\1\u01df\6\41\23\0\10\41\5\0\31\41\3\0"+
    "\7\41\1\u01e0\23\41\23\0\10\41\5\0\31\41\3\0"+
    "\25\41\1\u01e1\5\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u01e2\31\41\23\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u01e3\25\41\23\0\10\41\5\0\31\41\3\0"+
    "\16\41\1\u01e4\14\41\23\0\10\41\5\0\31\41\3\0"+
    "\15\41\1\u01e5\15\41\23\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\255\13\41\23\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\262\21\41\23\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u018b\21\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u01e6\15\41\1\251\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\14\41\1\u01e7\16\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u01e8\31\41\23\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u016d\25\41\23\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\255\25\41\23\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\u01e9\27\41\23\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\u01ea\10\41\23\0\10\41\5\0"+
    "\31\41\3\0\23\41\1\u018c\7\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u01eb\20\41\1\u01ec\6\41\1\u01ed"+
    "\1\41\23\0\10\41\5\0\31\41\3\0\20\41\1\u01ee"+
    "\12\41\23\0\10\41\5\0\31\41\3\0\3\41\1\u01ef"+
    "\17\41\1\u01f0\1\u01f1\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\25\41\1\u01f2\5\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u01f3\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u01f4\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u01f5\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\2\41\1\u0197\30\41\23\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u01f6\14\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u01f7\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\6\41\1\260\24\41\23\0\10\41\5\0\31\41"+
    "\3\0\15\41\1\255\15\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u016d\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u01f8\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u01f9\2\41\1\u0182\13\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\u01fa\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\23\41\1\u014b\7\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\273\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u01fb\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u01fc\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\u01e6\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\15\41\1\260\15\41\23\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u01fd\27\41\23\0\10\41"+
    "\5\0\31\41\3\0\2\41\1\u01fe\30\41\23\0\10\41"+
    "\5\0\31\41\3\0\14\41\1\u01ff\2\41\1\u0200\13\41"+
    "\23\0\10\41\5\0\31\41\3\0\11\41\1\u0201\21\41"+
    "\23\0\10\41\5\0\31\41\3\0\24\41\1\u0202\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u0203\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\270\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\2\41\1\u0204\30\41"+
    "\23\0\10\41\5\0\31\41\3\0\7\41\1\255\23\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\41\1\u0156\31\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u0205\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\11\41\1\u0206\21\41"+
    "\23\0\10\41\5\0\31\41\3\0\30\41\1\u0207\2\41"+
    "\23\0\10\41\5\0\31\41\3\0\14\41\1\u0208\16\41"+
    "\23\0\10\41\5\0\31\41\3\0\14\41\1\u0209\16\41"+
    "\23\0\10\41\5\0\31\41\3\0\22\41\1\u020a\10\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u020b\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\13\41\1\u020c\17\41"+
    "\23\0\10\41\5\0\31\41\3\0\23\41\1\260\7\41"+
    "\23\0\10\41\5\0\31\41\3\0\26\41\1\u020d\4\41"+
    "\23\0\10\41\5\0\31\41\3\0\3\41\1\u020e\3\41"+
    "\1\u020f\14\41\1\u0210\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u0211\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\u0212\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0213\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0214\14\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0215\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\25\41\1\u0216\5\41\23\0\10\41\5\0\31\41"+
    "\3\0\25\41\1\u0217\5\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u01fc\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0218\14\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0219\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u021a\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\25\41\1\u021b\5\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u021c\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u014c\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u021d\27\41\23\0\10\41\5\0\31\41"+
    "\3\0\20\41\1\u021e\12\41\23\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\273\14\41\23\0\10\41\5\0\31\41"+
    "\3\0\23\41\1\255\7\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u021f\11\41\1\u0220\13\41\23\0\10\41"+
    "\5\0\31\41\3\0\16\41\1\u0221\14\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\u0222\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\17\41\1\u0223\13\41\23\0\10\41"+
    "\5\0\31\41\3\0\11\41\1\u0224\21\41\23\0\10\41"+
    "\5\0\31\41\3\0\11\41\1\270\21\41\23\0\10\41"+
    "\5\0\31\41\3\0\24\41\1\u0225\6\41\23\0\10\41"+
    "\5\0\31\41\3\0\4\41\1\255\26\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u0226\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u0227\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\14\41\1\u014b\16\41\23\0\10\41"+
    "\5\0\31\41\3\0\10\41\1\273\22\41\23\0\10\41"+
    "\5\0\31\41\3\0\14\41\1\u0228\16\41\15\0\1\111"+
    "\153\0\1\u0229\202\0\1\u022a\105\0\1\135\136\0\1\u022b"+
    "\121\0\1\u01a1\133\0\1\u022c\122\0\1\135\124\0\1\u022d"+
    "\154\0\1\135\121\0\1\u022e\130\0\1\u022f\124\0\1\u0230"+
    "\45\0\1\335\43\0\1\362\120\0\1\u0231\126\0\1\u0232"+
    "\141\0\1\u0233\117\0\1\367\135\0\1\u0234\115\0\1\u0235"+
    "\21\0\1\u0236\125\0\1\u0237\117\0\1\135\115\0\1\u0238"+
    "\141\0\1\u0239\123\0\1\135\113\0\1\u023a\152\0\1\u023b"+
    "\106\0\1\u01b2\126\0\1\u023c\134\0\1\135\140\0\1\135"+
    "\102\0\1\135\3\0\1\u0115\124\0\1\u0107\130\0\1\u023d"+
    "\130\0\1\362\1\0\1\u022e\135\0\1\u01b4\107\0\1\u01af"+
    "\151\0\1\u023e\111\0\1\u019c\137\0\1\135\117\0\1\u023f"+
    "\131\0\1\u01b2\134\0\1\u0240\123\0\1\u0241\123\0\1\u01a1"+
    "\127\0\1\u0242\131\0\1\u0243\132\0\1\u0244\121\0\1\u023b"+
    "\110\0\1\367\130\0\1\u01b7\130\0\1\u022c\50\0\10\41"+
    "\5\0\10\41\1\u012b\20\41\3\0\33\41\23\0\10\41"+
    "\5\0\1\u0245\30\41\3\0\33\41\23\0\10\41\5\0"+
    "\23\41\1\u01d7\5\41\3\0\33\41\23\0\10\41\5\0"+
    "\10\41\1\u0246\20\41\3\0\33\41\23\0\10\41\5\0"+
    "\5\41\1\166\23\41\3\0\33\41\23\0\10\41\5\0"+
    "\17\41\1\u0247\11\41\3\0\33\41\23\0\10\41\5\0"+
    "\15\41\1\u0248\13\41\3\0\33\41\23\0\10\41\5\0"+
    "\21\41\1\146\7\41\3\0\33\41\23\0\10\41\5\0"+
    "\21\41\1\u012b\7\41\3\0\33\41\23\0\10\41\5\0"+
    "\4\41\1\146\24\41\3\0\33\41\23\0\10\41\5\0"+
    "\1\41\1\u0249\27\41\3\0\33\41\23\0\10\41\5\0"+
    "\17\41\1\u024a\11\41\3\0\33\41\23\0\10\41\5\0"+
    "\2\41\1\u012b\26\41\3\0\33\41\23\0\10\41\5\0"+
    "\22\41\1\u024b\6\41\3\0\33\41\23\0\10\41\5\0"+
    "\4\41\1\27\24\41\3\0\33\41\23\0\10\41\5\0"+
    "\5\41\1\u024c\23\41\3\0\33\41\23\0\10\41\5\0"+
    "\4\41\1\166\24\41\3\0\33\41\23\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\u024d\10\41\23\0\10\41\5\0"+
    "\31\41\3\0\16\41\1\u024e\14\41\23\0\10\41\5\0"+
    "\31\41\3\0\15\41\1\u024f\15\41\23\0\10\41\5\0"+
    "\31\41\3\0\31\41\1\273\1\41\23\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\u0250\10\41\23\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\260\27\41\23\0\10\41\5\0"+
    "\31\41\3\0\11\41\1\u0251\21\41\23\0\10\41\5\0"+
    "\31\41\3\0\16\41\1\u0194\14\41\23\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u0252\25\41\23\0\10\41\5\0"+
    "\31\41\3\0\13\41\1\255\17\41\23\0\10\41\5\0"+
    "\31\41\3\0\10\41\1\255\22\41\23\0\1\41\1\u0253"+
    "\1\41\1\u0254\3\41\1\u0255\5\0\31\41\3\0\33\41"+
    "\23\0\10\41\5\0\31\41\3\0\27\41\1\u0256\3\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u0257\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\11\41\1\u0258\21\41"+
    "\23\0\10\41\5\0\31\41\3\0\14\41\1\255\16\41"+
    "\23\0\10\41\5\0\31\41\3\0\5\41\1\u0259\25\41"+
    "\23\0\10\41\5\0\31\41\3\0\24\41\1\u025a\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\11\41\1\u025b\21\41"+
    "\23\0\10\41\5\0\31\41\3\0\7\41\1\u025c\23\41"+
    "\23\0\10\41\5\0\31\41\3\0\24\41\1\u025d\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\25\41\1\u025e\5\41"+
    "\23\0\10\41\5\0\31\41\3\0\24\41\1\u014b\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\24\41\1\u025f\6\41"+
    "\23\0\10\41\5\0\31\41\3\0\15\41\1\u0260\15\41"+
    "\23\0\10\41\5\0\31\41\3\0\20\41\1\u0250\12\41"+
    "\23\0\10\41\5\0\31\41\3\0\11\41\1\u0261\21\41"+
    "\23\0\10\41\5\0\31\41\3\0\16\41\1\u0262\3\41"+
    "\1\u0223\10\41\23\0\10\41\5\0\31\41\3\0\14\41"+
    "\1\u0263\16\41\23\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\255\6\41\23\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u0264\6\41\23\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u0265\31\41\23\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u01e1\25\41\23\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\262\10\41\23\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\u014b\14\41\23\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u0266\31\41\23\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\u0267\10\41\23\0\10\41\5\0\31\41\3\0\4\41"+
    "\1\u0268\26\41\23\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u0269\7\41\23\0\10\41\5\0\31\41\3\0\26\41"+
    "\1\u014a\4\41\23\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\u01ef\27\41\23\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u026a\13\41\23\0\10\41\5\0\31\41\3\0\20\41"+
    "\1\u026b\12\41\23\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u026c\31\41\23\0\10\41\5\0\31\41\3\0\21\41"+
    "\1\255\11\41\23\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u026d\3\41\1\264\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u01f5\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u026e\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u026f\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0270\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0271\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\264\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\23\41\1\u0272\7\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u0273\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\303\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0274\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u0223\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0194\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\u0275\13\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0276\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u01fc\27\41\23\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u016d\10\41\23\0\10\41\5\0\31\41"+
    "\3\0\10\41\1\u0277\22\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u020d\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u0278\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\27\41\1\u0279\3\41\23\0\10\41\5\0\31\41"+
    "\3\0\23\41\1\u027a\7\41\23\0\10\41\5\0\31\41"+
    "\3\0\4\41\1\u027b\4\41\1\u0194\4\41\1\u027c\1\u027d"+
    "\13\41\23\0\10\41\5\0\31\41\3\0\16\41\1\255"+
    "\14\41\23\0\10\41\5\0\31\41\3\0\7\41\1\u0183"+
    "\23\41\23\0\10\41\5\0\31\41\3\0\25\41\1\u027e"+
    "\5\41\23\0\10\41\5\0\31\41\3\0\24\41\1\324"+
    "\6\41\23\0\10\41\5\0\31\41\3\0\22\41\1\u0255"+
    "\10\41\23\0\10\41\5\0\31\41\3\0\4\41\1\u016d"+
    "\26\41\63\0\1\u027f\144\0\1\u0280\124\0\1\u01c6\142\0"+
    "\1\135\122\0\1\u0281\132\0\1\354\110\0\1\u0282\136\0"+
    "\1\u022e\60\0\1\335\50\0\1\u0283\123\0\1\u0284\134\0"+
    "\1\365\113\0\1\u0285\123\0\1\u0286\147\0\1\u01a1\111\0"+
    "\1\u0115\64\0\1\335\41\0\1\u0115\146\0\1\u01c1\116\0"+
    "\1\u01a1\135\0\1\135\120\0\1\367\113\0\1\u023b\150\0"+
    "\1\u0236\121\0\1\u023b\111\0\1\u01a1\141\0\1\365\111\0"+
    "\1\u0287\141\0\1\u0288\113\0\1\u0289\54\0\10\41\5\0"+
    "\21\41\1\u01de\7\41\3\0\33\41\23\0\10\41\5\0"+
    "\15\41\1\u01da\13\41\3\0\33\41\23\0\10\41\5\0"+
    "\23\41\1\u028a\5\41\3\0\33\41\23\0\10\41\5\0"+
    "\6\41\1\146\22\41\3\0\33\41\23\0\10\41\5\0"+
    "\1\u028b\30\41\3\0\33\41\23\0\10\41\5\0\16\41"+
    "\1\200\12\41\3\0\33\41\23\0\10\41\5\0\1\u028c"+
    "\30\41\3\0\33\41\23\0\10\41\5\0\16\41\1\u01d5"+
    "\12\41\3\0\33\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u028d\31\41\23\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u018c\15\41\1\u0275\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u028e\25\41\23\0\10\41\5\0"+
    "\31\41\3\0\24\41\1\260\6\41\23\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\u028f\27\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u0290\31\41\23\0\5\41\1\u0255"+
    "\2\41\5\0\31\41\3\0\33\41\23\0\2\41\1\u0255"+
    "\5\41\5\0\31\41\3\0\33\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\u01fc\32\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u0291\31\41\23\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u0181\6\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u0292\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\20\41\1\u01fc\12\41\23\0\10\41\5\0\31\41"+
    "\3\0\1\u0293\4\41\1\u0294\3\41\1\u0295\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\16\41\1\u0296\14\41\23\0"+
    "\10\41\5\0\31\41\3\0\7\41\1\u0187\23\41\23\0"+
    "\10\41\5\0\31\41\3\0\31\41\1\u0297\1\41\23\0"+
    "\10\41\5\0\31\41\3\0\14\41\1\u01fc\16\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\273\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0298\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u0291\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\4\41\1\u0299\26\41\23\0"+
    "\10\41\5\0\31\41\3\0\14\41\1\u029a\16\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u029b\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\14\41\1\260\16\41\23\0"+
    "\10\41\5\0\31\41\3\0\16\41\1\u029c\14\41\23\0"+
    "\10\41\5\0\31\41\3\0\6\41\1\u029d\24\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\260\31\41\23\0"+
    "\10\41\5\0\31\41\3\0\20\41\1\u029e\12\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u01fe\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\251\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u029f\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\7\41\1\u014a\23\41\23\0"+
    "\10\41\5\0\31\41\3\0\4\41\1\u02a0\26\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\u02a1\31\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u02a2\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\255\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u02a3\6\41\23\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u02a4\25\41\23\0"+
    "\10\41\5\0\31\41\3\0\22\41\1\u02a5\10\41\23\0"+
    "\10\41\5\0\31\41\3\0\6\41\1\255\24\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u02a6\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\22\41\1\u02a7\10\41\23\0"+
    "\10\41\5\0\31\41\3\0\4\41\1\u02a8\26\41\23\0"+
    "\10\41\5\0\31\41\3\0\23\41\1\u016d\7\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u02a9\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0275\25\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\u02aa\31\41\23\0"+
    "\10\41\5\0\31\41\3\0\6\41\1\u016d\24\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\u01ee\31\41\70\0"+
    "\1\u02ab\155\0\1\u0282\124\0\1\u02ac\130\0\1\135\114\0"+
    "\1\u02ad\131\0\1\u0282\135\0\1\u02ae\123\0\1\u01a6\130\0"+
    "\1\u01a3\105\0\1\350\147\0\1\u02af\33\0\10\41\5\0"+
    "\10\41\1\u02b0\20\41\3\0\33\41\23\0\10\41\5\0"+
    "\2\41\1\u012c\26\41\3\0\33\41\23\0\10\41\5\0"+
    "\2\41\1\u02b1\26\41\3\0\33\41\23\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\262\27\41\23\0\10\41\5\0"+
    "\31\41\3\0\16\41\1\u02b2\14\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\u02b3\32\41\23\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u016d\14\41\23\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u01fc\21\41\23\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u0194\16\41\23\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u02b4\27\41\23\0\10\41\5\0\31\41"+
    "\3\0\26\41\1\u027e\1\41\1\u02b5\2\41\23\0\10\41"+
    "\5\0\31\41\3\0\16\41\1\u0291\14\41\23\0\10\41"+
    "\5\0\31\41\3\0\25\41\1\u014b\5\41\23\0\10\41"+
    "\5\0\31\41\3\0\20\41\1\u014b\12\41\23\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u02b6\27\41\23\0\10\41"+
    "\5\0\31\41\3\0\31\41\1\u016d\1\41\23\0\10\41"+
    "\5\0\31\41\3\0\17\41\1\u018b\13\41\23\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u02b7\27\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u02b8\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u02b9\31\41\23\0\10\41"+
    "\5\0\31\41\3\0\17\41\1\251\13\41\23\0\10\41"+
    "\5\0\31\41\3\0\25\41\1\u02ba\5\41\23\0\10\41"+
    "\5\0\31\41\3\0\15\41\1\273\15\41\23\0\10\41"+
    "\5\0\31\41\3\0\24\41\1\u0218\6\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\251\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\22\41\1\u02bb\10\41\23\0\10\41"+
    "\5\0\31\41\3\0\5\41\1\u018c\25\41\23\0\10\41"+
    "\5\0\31\41\3\0\1\u02bc\32\41\23\0\10\41\5\0"+
    "\31\41\3\0\17\41\1\u02bd\13\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\u02be\32\41\23\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u02bf\25\41\23\0\10\41\5\0\31\41"+
    "\3\0\15\41\1\u014b\15\41\57\0\1\u02c0\170\0\1\u02c1"+
    "\124\0\1\u023b\110\0\1\u023b\126\0\1\u019d\50\0\10\41"+
    "\5\0\16\41\1\u0136\12\41\3\0\33\41\23\0\10\41"+
    "\5\0\23\41\1\u02c2\5\41\3\0\33\41\23\0\10\41"+
    "\5\0\31\41\3\0\24\41\1\u0299\6\41\23\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u02c3\12\41\1\u02c4\14\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\41\1\u02c5\31\41"+
    "\23\0\10\41\5\0\31\41\3\0\20\41\1\251\12\41"+
    "\23\0\10\41\5\0\31\41\3\0\1\u0293\32\41\23\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u02c6\25\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u014a\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\3\41\1\u014b\27\41\23\0"+
    "\10\41\5\0\31\41\3\0\22\41\1\u0160\10\41\23\0"+
    "\10\41\5\0\31\41\3\0\20\41\1\u02c7\12\41\23\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\u02c8\1\41\1\u02b4"+
    "\27\41\23\0\10\41\5\0\31\41\3\0\16\41\1\u02c9"+
    "\14\41\23\0\10\41\5\0\31\41\3\0\14\41\1\u02ca"+
    "\16\41\23\0\10\41\5\0\31\41\3\0\16\41\1\262"+
    "\14\41\44\0\1\u02cb\175\0\1\350\36\0\10\41\5\0"+
    "\10\41\1\u02cc\20\41\3\0\33\41\23\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u02cd\15\41\1\u02ce\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u02cf\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\23\41\1\u01fc\7\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u027d\13\41\23\0"+
    "\10\41\5\0\31\41\3\0\22\41\1\u02d0\10\41\23\0"+
    "\10\41\5\0\31\41\3\0\23\41\1\u02d1\7\41\23\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u02d2\21\41\23\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u02d3\13\41\7\0"+
    "\1\u02d4\142\0\10\41\5\0\16\41\1\u012a\12\41\3\0"+
    "\33\41\23\0\10\41\5\0\31\41\3\0\16\41\1\u02d5"+
    "\14\41\23\0\10\41\5\0\31\41\3\0\15\41\1\u02d6"+
    "\15\41\23\0\10\41\5\0\31\41\3\0\5\41\1\u0172"+
    "\25\41\23\0\10\41\5\0\31\41\3\0\5\41\1\u02d7"+
    "\25\41\23\0\10\41\5\0\31\41\3\0\23\41\1\u02d8"+
    "\7\41\23\0\10\41\5\0\31\41\3\0\32\41\1\u0218"+
    "\23\0\10\41\5\0\31\41\3\0\3\41\1\u027e\27\41"+
    "\104\0\1\u02d9\45\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\u02da\27\41\23\0\10\41\5\0\31\41\3\0\15\41"+
    "\1\u0291\15\41\23\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u02b6\6\41\23\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u0182\25\41\120\0\1\363\31\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u01ee\25\41\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60987];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\5\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\31\1\2\11\25\1\5\11\1\0\1\1"+
    "\3\0\1\11\25\0\2\11\162\1\2\0\1\11\1\1"+
    "\1\0\1\11\71\0\203\1\64\0\133\1\34\0\72\1"+
    "\13\0\41\1\5\0\20\1\2\0\11\1\1\0\10\1"+
    "\1\0\4\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[730];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 39: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 4:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 5:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 6:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 7:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 8:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 9:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 10:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 11:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 12:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 13:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 14:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 15:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 16:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 17:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 18:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 19:
            { return token(yytext(), "ID", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 20:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 21:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 22:
            { return token(yytext(), "LLAVEABIERTA", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 23:
            { return token(yytext(), "LLAVECERRADA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 24:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 25:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 26:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 27:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 28:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 29:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 30:
            { return token(yytext(), "TSQL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 31:
            { return token(yytext(), "PLSQL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 32:
            { return token(yytext(), "PYTHON_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 33:
            { return token(yytext(), "CPP_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 34:
            { return token(yytext(), "PASCAL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 35:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 36:
            { return token(yytext(), "HTML_TAG", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 37:
            { return token(yytext(), "JS_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
