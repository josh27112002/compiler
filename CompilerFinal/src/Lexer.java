// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/Lexer.flex

import compilerTools.Token;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\24\1\25\1\26\1\27\1\26\1\30\1\31\1\32"+
    "\1\33\1\34\2\0\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\55\1\66\1\67\1\70"+
    "\1\0\1\71\1\0\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\0\1\125"+
    "\7\0\1\3\73\0\1\55\7\0\1\55\3\0\1\55"+
    "\3\0\1\55\1\0\1\55\6\0\1\55\1\0\1\55"+
    "\4\0\1\55\7\0\1\55\3\0\1\55\3\0\1\55"+
    "\1\0\1\55\6\0\1\55\1\0\1\55\u012b\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\26\23\1\24\1\25\25\23"+
    "\1\26\1\27\1\30\1\31\1\32\1\0\1\2\3\0"+
    "\1\33\25\0\1\34\1\35\1\36\17\23\1\37\32\23"+
    "\1\40\16\23\1\41\14\23\1\41\1\23\1\42\1\40"+
    "\12\23\1\42\1\23\1\41\32\23\2\0\2\43\1\44"+
    "\70\0\75\23\2\40\24\23\1\41\2\23\1\45\54\23"+
    "\61\0\31\23\1\41\2\23\1\41\36\23\1\45\30\23"+
    "\1\42\6\23\33\0\25\23\1\41\10\23\1\45\25\23"+
    "\1\41\5\23\13\0\34\23\1\41\4\23\5\0\20\23"+
    "\1\0\26\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[720];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\126\0\254\0\u0102\0\126\0\126\0\126"+
    "\0\126\0\126\0\u0158\0\126\0\u01ae\0\126\0\u0204\0\u025a"+
    "\0\u02b0\0\126\0\126\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e"+
    "\0\u04b4\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8\0\u070e"+
    "\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be"+
    "\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\126\0\126\0\u0b6c\0\u0bc2"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72"+
    "\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122"+
    "\0\u1178\0\u11ce\0\u1224\0\126\0\126\0\126\0\126\0\126"+
    "\0\u127a\0\u12d0\0\u1326\0\u137c\0\u13d2\0\126\0\u1428\0\u147e"+
    "\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e"+
    "\0\u1784\0\u17da\0\u1830\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de"+
    "\0\u1a34\0\u1a8a\0\u1ae0\0\126\0\126\0\u0764\0\u1b36\0\u1b8c"+
    "\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c"+
    "\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94\0\u1fea\0\u0764\0\u2040\0\u2096"+
    "\0\u20ec\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346"+
    "\0\u239c\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6"+
    "\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u27fa\0\u2850\0\u28a6"+
    "\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u2aaa\0\u2b00\0\u2b56"+
    "\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a\0\u2db0\0\u2e06"+
    "\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6"+
    "\0\u310c\0\u3162\0\u31b8\0\u320e\0\u0764\0\u3264\0\u32ba\0\u0764"+
    "\0\u3310\0\u3366\0\u33bc\0\u3412\0\u3468\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u3616\0\u0764\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4"+
    "\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u3cce\0\u3d24"+
    "\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4"+
    "\0\u402a\0\126\0\u4080\0\126\0\u40d6\0\u412c\0\u4182\0\u41d8"+
    "\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488"+
    "\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u4738"+
    "\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8"+
    "\0\u4a3e\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98"+
    "\0\u4cee\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48"+
    "\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8"+
    "\0\u524e\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8"+
    "\0\u54fe\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758"+
    "\0\u57ae\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08"+
    "\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8"+
    "\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68"+
    "\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218"+
    "\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472\0\u64c8"+
    "\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778"+
    "\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u6cd8"+
    "\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u6f32\0\u6f88"+
    "\0\u6fde\0\u7034\0\u0764\0\u708a\0\u70e0\0\u7136\0\u718c\0\u71e2"+
    "\0\u7238\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u743c\0\u7492"+
    "\0\u74e8\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742"+
    "\0\u7798\0\u77ee\0\u7844\0\u789a\0\u78f0\0\u7946\0\u799c\0\u79f2"+
    "\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2"+
    "\0\u7cf8\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u7ea6\0\u7efc\0\u7f52"+
    "\0\u7fa8\0\u7ffe\0\u8054\0\u80aa\0\u8100\0\u8156\0\u81ac\0\u8202"+
    "\0\u8258\0\u82ae\0\u8304\0\u835a\0\u83b0\0\u8406\0\u845c\0\u84b2"+
    "\0\u8508\0\u855e\0\u85b4\0\u860a\0\u8660\0\u86b6\0\u870c\0\u8762"+
    "\0\u87b8\0\u880e\0\u8864\0\u88ba\0\u8910\0\u8966\0\u89bc\0\u8a12"+
    "\0\u8a68\0\u8abe\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16\0\u8c6c\0\u8cc2"+
    "\0\u8d18\0\u8d6e\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6\0\u8f1c\0\u8f72"+
    "\0\u8fc8\0\u901e\0\u9074\0\u90ca\0\u9120\0\u9176\0\u91cc\0\u9222"+
    "\0\u9278\0\u92ce\0\u9324\0\u937a\0\u93d0\0\u9426\0\u947c\0\u94d2"+
    "\0\u9528\0\u957e\0\u95d4\0\u962a\0\u9680\0\u96d6\0\u972c\0\u9782"+
    "\0\u97d8\0\u982e\0\u9884\0\u98da\0\u9930\0\u9986\0\u99dc\0\u9a32"+
    "\0\u9a88\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36\0\u9c8c\0\u9ce2"+
    "\0\u9d38\0\u9d8e\0\u9de4\0\u9e3a\0\u9e90\0\u9ee6\0\u9f3c\0\u9f92"+
    "\0\u9fe8\0\ua03e\0\ua094\0\ua0ea\0\ua140\0\ua196\0\ua1ec\0\ua242"+
    "\0\ua298\0\ua2ee\0\ua344\0\ua39a\0\ua3f0\0\ua446\0\ua49c\0\ua4f2"+
    "\0\ua548\0\ua59e\0\ua5f4\0\ua64a\0\ua6a0\0\ua6f6\0\ua74c\0\ua7a2"+
    "\0\ua7f8\0\ua84e\0\ua8a4\0\ua8fa\0\ua950\0\ua9a6\0\ua9fc\0\uaa52"+
    "\0\uaaa8\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56\0\uacac\0\uad02"+
    "\0\uad58\0\uadae\0\uae04\0\uae5a\0\uaeb0\0\uaf06\0\uaf5c\0\uafb2"+
    "\0\ub008\0\ub05e\0\ub0b4\0\ub10a\0\ub160\0\ub1b6\0\ub20c\0\ub262"+
    "\0\ub2b8\0\ub30e\0\ub364\0\ub3ba\0\ub410\0\ub466\0\ub4bc\0\ub512"+
    "\0\ub568\0\ub5be\0\ub614\0\ub66a\0\ub6c0\0\ub716\0\ub76c\0\ub7c2"+
    "\0\ub818\0\ub86e\0\ub8c4\0\ub91a\0\ub970\0\ub9c6\0\uba1c\0\uba72"+
    "\0\ubac8\0\ubb1e\0\ubb74\0\ubbca\0\ubc20\0\ubc76\0\ubccc\0\ubd22"+
    "\0\ubd78\0\ubdce\0\ube24\0\ube7a\0\ubed0\0\ubf26\0\ubf7c\0\ubfd2"+
    "\0\uc028\0\uc07e\0\uc0d4\0\uc12a\0\uc180\0\uc1d6\0\uc22c\0\uc282"+
    "\0\uc2d8\0\uc32e\0\uc384\0\uc3da\0\uc430\0\uc486\0\uc4dc\0\uc532"+
    "\0\uc588\0\uc5de\0\uc634\0\uc68a\0\uc6e0\0\uc736\0\uc78c\0\uc7e2"+
    "\0\uc838\0\uc88e\0\uc8e4\0\uc93a\0\uc990\0\uc9e6\0\uca3c\0\uca92"+
    "\0\ucae8\0\ucb3e\0\ucb94\0\ucbea\0\ucc40\0\ucc96\0\uccec\0\ucd42"+
    "\0\ucd98\0\ucdee\0\uce44\0\uce9a\0\ucef0\0\ucf46\0\ucf9c\0\ucff2"+
    "\0\ud048\0\ud09e\0\ud0f4\0\ud14a\0\ud1a0\0\ud1f6\0\ud24c\0\ud2a2"+
    "\0\ud2f8\0\ud34e\0\uc8e4\0\ud3a4\0\ud3fa\0\ud450\0\ud4a6\0\ud4fc"+
    "\0\ud552\0\ud5a8\0\ud5fe\0\ud654\0\ud6aa\0\ud700\0\ud756\0\ud7ac"+
    "\0\ud802\0\ud858\0\ud8ae\0\ud904\0\ud95a\0\ud9b0\0\uda06\0\uda5c"+
    "\0\udab2\0\udb08\0\udb5e\0\udbb4\0\udc0a\0\udc60\0\udcb6\0\udd0c"+
    "\0\udd62\0\uddb8\0\ude0e\0\ude64\0\udeba\0\udf10\0\udf66\0\udfbc"+
    "\0\ue012\0\ue068\0\ue0be\0\ue114\0\ue16a\0\ue1c0\0\ue216\0\ue26c"+
    "\0\ue2c2\0\ue318\0\ue36e\0\ue3c4\0\ue41a\0\ue470\0\ue4c6\0\ue51c"+
    "\0\ue572\0\ue5c8\0\ue61e\0\ue674\0\ue6ca\0\ue720\0\ue776\0\ue7cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[720];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\7\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\41\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\2\41\1\55\1\2"+
    "\1\56\1\41\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\41\1\66\2\41\1\67\1\70\1\71\1\72"+
    "\1\73\1\41\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\41\1\104\1\105\130\0\1\3\156\0"+
    "\1\106\105\0\1\107\127\0\1\110\122\0\1\111\4\0"+
    "\1\112\47\0\1\113\54\0\1\114\125\0\1\114\1\0"+
    "\10\21\115\0\1\115\13\0\1\116\36\0\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\126\1\0"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\40\0\1\144\125\0"+
    "\1\145\112\0\10\41\5\0\22\41\1\146\6\41\3\0"+
    "\33\41\22\0\10\41\5\0\4\41\1\147\23\41\1\146"+
    "\3\0\33\41\22\0\10\41\5\0\16\41\1\150\2\41"+
    "\1\151\7\41\3\0\33\41\22\0\10\41\5\0\4\41"+
    "\1\152\3\41\1\153\20\41\3\0\33\41\22\0\10\41"+
    "\5\0\13\41\1\154\1\41\1\155\11\41\1\156\1\41"+
    "\3\0\33\41\22\0\10\41\5\0\16\41\1\157\2\41"+
    "\1\160\2\41\1\161\4\41\3\0\1\41\1\162\31\41"+
    "\22\0\10\41\5\0\16\41\1\163\2\41\1\164\7\41"+
    "\3\0\33\41\22\0\10\41\5\0\1\165\30\41\3\0"+
    "\33\41\22\0\10\41\5\0\5\41\1\166\7\41\1\167"+
    "\13\41\3\0\33\41\22\0\10\41\5\0\16\41\1\170"+
    "\12\41\3\0\33\41\22\0\10\41\5\0\31\41\3\0"+
    "\33\41\22\0\10\41\5\0\4\41\1\171\11\41\1\172"+
    "\12\41\3\0\33\41\22\0\10\41\5\0\4\41\1\173"+
    "\24\41\3\0\33\41\22\0\10\41\5\0\24\41\1\174"+
    "\4\41\3\0\17\41\1\175\13\41\22\0\10\41\5\0"+
    "\15\41\1\146\3\41\1\176\2\41\1\177\4\41\3\0"+
    "\33\41\22\0\10\41\5\0\21\41\1\200\7\41\3\0"+
    "\33\41\22\0\10\41\5\0\10\41\1\201\5\41\1\202"+
    "\12\41\3\0\33\41\22\0\10\41\5\0\1\203\3\41"+
    "\1\204\24\41\3\0\33\41\22\0\10\41\5\0\7\41"+
    "\1\205\6\41\1\206\2\41\1\207\7\41\3\0\22\41"+
    "\1\210\10\41\22\0\10\41\5\0\17\41\1\211\11\41"+
    "\3\0\33\41\22\0\10\41\5\0\1\212\30\41\3\0"+
    "\33\41\22\0\10\41\5\0\1\213\6\41\1\214\21\41"+
    "\3\0\33\41\22\0\10\41\5\0\31\41\3\0\2\41"+
    "\1\215\11\41\1\216\1\41\1\217\3\41\1\220\1\221"+
    "\1\222\1\223\1\41\1\224\3\41\22\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\225\3\41\1\226\5\41\1\227"+
    "\2\41\1\230\6\41\1\231\1\41\22\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\232\6\41\1\233\3\41\1\234"+
    "\2\41\1\235\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\236\3\41\1\237\5\41\1\240\11\41\1\241"+
    "\1\41\22\0\10\41\5\0\31\41\3\0\14\41\1\242"+
    "\1\41\1\243\7\41\1\244\1\41\1\245\2\41\22\0"+
    "\10\41\5\0\31\41\3\0\1\41\1\246\7\41\1\247"+
    "\2\41\1\250\2\41\1\251\2\41\1\252\2\41\1\253"+
    "\5\41\22\0\10\41\5\0\31\41\3\0\14\41\1\254"+
    "\2\41\1\223\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\6\41\1\255\6\41\1\256\1\257\4\41\1\260\7\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\261\3\41"+
    "\1\262\11\41\1\263\13\41\22\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\264\5\41\1\265\5\41\22\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\266\3\41\1\267\3\41"+
    "\1\270\5\41\1\271\5\41\1\272\5\41\22\0\10\41"+
    "\5\0\31\41\3\0\6\41\1\273\11\41\1\274\1\41"+
    "\1\275\10\41\22\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\276\20\41\1\277\2\41\1\300\5\41\22\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\301\3\41\1\302\25\41"+
    "\22\0\10\41\5\0\31\41\3\0\5\41\1\303\2\41"+
    "\1\304\1\305\12\41\1\306\1\307\1\41\1\310\1\41"+
    "\1\311\1\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\312\2\41\1\313\6\41\1\273\2\41\1\314\6\41"+
    "\1\315\1\41\22\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\316\4\41\1\317\7\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\320\7\41\1\321\5\41\1\322\13\41"+
    "\22\0\10\41\5\0\31\41\3\0\3\41\1\323\4\41"+
    "\1\324\1\325\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\326\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\327\21\41\2\0\12\111\1\330\113\111\67\112"+
    "\1\0\17\112\1\0\16\112\12\0\1\331\133\0\1\332"+
    "\7\333\170\0\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\0\1\125\1\126\1\0\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142"+
    "\1\143\41\0\1\334\36\0\1\143\1\0\1\335\15\0"+
    "\1\336\1\337\1\0\1\340\43\0\1\334\35\0\1\341"+
    "\2\0\1\342\7\0\1\343\2\0\1\344\2\0\1\135"+
    "\2\0\1\345\101\0\1\346\7\0\1\347\5\0\1\350"+
    "\107\0\1\351\2\0\1\135\1\352\1\353\2\0\1\354"+
    "\2\0\1\135\7\0\1\135\116\0\1\355\121\0\1\356"+
    "\5\0\1\357\36\0\5\135\50\0\1\360\14\0\1\135"+
    "\1\0\1\361\44\0\1\334\42\0\1\362\6\0\1\363"+
    "\1\364\111\0\1\365\124\0\1\366\3\0\1\367\3\0"+
    "\1\370\115\0\1\371\3\0\1\372\121\0\1\373\15\0"+
    "\1\374\110\0\1\375\11\0\1\135\3\0\1\376\4\0"+
    "\1\377\43\0\1\334\35\0\1\u0100\7\0\1\u0101\10\0"+
    "\1\u0102\46\0\1\334\202\0\1\135\3\0\1\135\1\u0103"+
    "\43\0\1\334\35\0\1\u0104\1\0\1\u0105\1\0\1\u0106"+
    "\7\0\1\u0107\1\0\1\u0108\1\u0109\3\0\1\u010a\1\u010b"+
    "\101\0\1\u010c\1\u010d\1\0\1\135\1\u010e\1\u010f\1\0"+
    "\1\u0110\1\u0111\10\0\1\u0112\46\0\1\334\50\0\1\135"+
    "\112\0\1\u0113\7\0\1\u0114\116\0\1\u0113\52\0\10\41"+
    "\5\0\6\41\1\u0115\22\41\3\0\33\41\22\0\10\41"+
    "\5\0\14\41\1\u0116\14\41\3\0\33\41\22\0\10\41"+
    "\5\0\16\41\1\u0117\12\41\3\0\33\41\22\0\10\41"+
    "\5\0\2\41\1\u0118\10\41\1\u0119\15\41\3\0\33\41"+
    "\22\0\10\41\5\0\22\41\1\u011a\6\41\3\0\33\41"+
    "\22\0\10\41\5\0\22\41\1\u011b\6\41\3\0\33\41"+
    "\22\0\10\41\5\0\3\41\1\166\25\41\3\0\33\41"+
    "\22\0\10\41\5\0\2\41\1\u011c\1\41\1\u011d\3\41"+
    "\1\u011e\20\41\3\0\33\41\22\0\10\41\5\0\21\41"+
    "\1\166\7\41\3\0\33\41\22\0\10\41\5\0\16\41"+
    "\1\u011f\12\41\3\0\33\41\22\0\10\41\5\0\13\41"+
    "\1\u0120\15\41\3\0\33\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u0121\16\41\22\0\10\41\5\0\23\41"+
    "\1\u0122\5\41\3\0\33\41\22\0\10\41\5\0\16\41"+
    "\1\u0123\12\41\3\0\33\41\22\0\10\41\5\0\25\41"+
    "\1\u0124\3\41\3\0\33\41\22\0\10\41\5\0\15\41"+
    "\1\u0125\4\41\1\u0126\1\u0127\5\41\3\0\33\41\22\0"+
    "\10\41\5\0\10\41\1\u0128\20\41\3\0\33\41\22\0"+
    "\10\41\5\0\5\41\1\u0129\23\41\3\0\33\41\22\0"+
    "\10\41\5\0\2\41\1\u012a\13\41\1\u012b\12\41\3\0"+
    "\33\41\22\0\10\41\5\0\21\41\1\u012c\7\41\3\0"+
    "\33\41\22\0\10\41\5\0\13\41\1\u012d\15\41\3\0"+
    "\33\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u012e"+
    "\14\41\22\0\10\41\5\0\3\41\1\u0125\25\41\3\0"+
    "\33\41\22\0\10\41\5\0\23\41\1\u0125\5\41\3\0"+
    "\33\41\22\0\10\41\5\0\10\41\1\u012f\20\41\3\0"+
    "\33\41\22\0\10\41\5\0\6\41\1\u0130\22\41\3\0"+
    "\33\41\22\0\10\41\5\0\13\41\1\u0131\15\41\3\0"+
    "\33\41\22\0\10\41\5\0\25\41\1\u0132\3\41\3\0"+
    "\33\41\22\0\10\41\5\0\13\41\1\u0133\7\41\1\146"+
    "\5\41\3\0\33\41\22\0\10\41\5\0\4\41\1\u0134"+
    "\24\41\3\0\33\41\22\0\10\41\5\0\17\41\1\146"+
    "\11\41\3\0\33\41\22\0\10\41\5\0\1\u0135\30\41"+
    "\3\0\33\41\22\0\10\41\5\0\31\41\3\0\25\41"+
    "\1\u012e\5\41\22\0\10\41\5\0\3\41\1\u0136\25\41"+
    "\3\0\33\41\22\0\10\41\5\0\13\41\1\u0137\15\41"+
    "\3\0\33\41\22\0\10\41\5\0\10\41\1\u0138\20\41"+
    "\3\0\33\41\22\0\10\41\5\0\4\41\1\u0139\3\41"+
    "\1\u013a\20\41\3\0\33\41\22\0\10\41\5\0\31\41"+
    "\3\0\23\41\1\u013b\7\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u013c\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\4\41\1\275\26\41\22\0\10\41\5\0\31\41"+
    "\3\0\7\41\1\u013d\12\41\1\u013e\10\41\22\0\10\41"+
    "\5\0\31\41\3\0\15\41\1\255\5\41\1\u013f\5\41"+
    "\1\u0140\1\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u0141\13\41\22\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u0142\6\41\22\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u0143\31\41\22\0\10\41\5\0\31\41\3\0\7\41"+
    "\1\u0144\23\41\22\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u0145\6\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u0146\13\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u0147\25\41\22\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\u0148\6\41\22\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u0149\1\u014a\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u014b\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u014c\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\u014d\14\41\1\u014e\1\u014f\14\41\22\0\10\41\5\0"+
    "\31\41\3\0\2\41\1\u0150\1\u0151\2\41\1\u0152\5\41"+
    "\1\u0153\16\41\22\0\10\41\5\0\31\41\3\0\26\41"+
    "\1\273\4\41\22\0\10\41\5\0\31\41\3\0\25\41"+
    "\1\u0154\1\41\1\u0155\3\41\22\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0156\14\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0157\11\41\1\u0149\7\41\22\0\10\41"+
    "\5\0\31\41\3\0\4\41\1\273\20\41\1\u0158\5\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u0159\31\41"+
    "\22\0\10\41\5\0\31\41\3\0\3\41\1\u015a\14\41"+
    "\1\u015b\3\41\1\u015c\6\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u015d\16\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u015e\1\41\1\u015f\14\41\22\0\10\41"+
    "\5\0\31\41\3\0\17\41\1\u0160\13\41\22\0\10\41"+
    "\5\0\31\41\3\0\22\41\1\255\10\41\22\0\10\41"+
    "\5\0\31\41\3\0\11\41\1\u0161\5\41\1\u0162\13\41"+
    "\22\0\10\41\5\0\31\41\3\0\16\41\1\u0163\14\41"+
    "\22\0\10\41\5\0\31\41\3\0\17\41\1\u0164\13\41"+
    "\22\0\10\41\5\0\31\41\3\0\20\41\1\u0165\12\41"+
    "\22\0\10\41\5\0\31\41\3\0\14\41\1\u0166\6\41"+
    "\1\u0167\1\u0168\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\2\41\1\u0169\12\41\1\u016a\15\41\22\0\10\41\5\0"+
    "\31\41\3\0\24\41\1\u016b\6\41\22\0\10\41\5\0"+
    "\31\41\3\0\16\41\1\u016c\14\41\22\0\10\41\5\0"+
    "\31\41\3\0\4\41\1\273\26\41\22\0\10\41\5\0"+
    "\31\41\3\0\24\41\1\u016d\6\41\22\0\10\41\5\0"+
    "\31\41\3\0\15\41\1\u016e\6\41\1\u016f\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\27\41\1\255\3\41\22\0"+
    "\10\41\5\0\31\41\3\0\14\41\1\273\16\41\22\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0170\10\41\1\u0171"+
    "\5\41\1\275\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\14\41\1\u0172\16\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u0173\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\u0174\32\41\22\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\u0175\17\41\1\u0176\7\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0177\5\41\1\u0178\13\41\22\0\10\41"+
    "\5\0\31\41\3\0\2\41\1\u0179\30\41\22\0\10\41"+
    "\5\0\31\41\3\0\11\41\1\u0121\21\41\22\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u017a\3\41\1\u017b\1\41"+
    "\1\u017c\6\41\1\u017d\1\u017e\2\41\1\u017f\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\273\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\17\41\1\u0180\13\41\22\0"+
    "\10\41\5\0\31\41\3\0\7\41\1\u0181\22\41\1\u0182"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u0183\20\41"+
    "\1\u0184\10\41\22\0\10\41\5\0\31\41\3\0\20\41"+
    "\1\u0185\12\41\22\0\10\41\5\0\31\41\3\0\11\41"+
    "\1\u0186\21\41\22\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\u0187\14\41\22\0\10\41\5\0\31\41\3\0\15\41"+
    "\1\u0188\15\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u0189\3\41\1\u018a\10\41\1\u018b\10\41\22\0\10\41"+
    "\5\0\31\41\3\0\1\41\1\u018c\23\41\1\u0149\3\41"+
    "\1\255\1\41\22\0\10\41\5\0\31\41\3\0\20\41"+
    "\1\u018d\12\41\22\0\10\41\5\0\31\41\3\0\11\41"+
    "\1\u018e\11\41\1\u018f\1\u0190\6\41\22\0\10\41\5\0"+
    "\31\41\3\0\11\41\1\263\21\41\22\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\273\10\41\22\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\u0191\10\41\22\0\10\41\5\0"+
    "\31\41\3\0\11\41\1\u0192\2\41\1\u0193\16\41\22\0"+
    "\10\41\5\0\31\41\3\0\10\41\1\u0194\22\41\22\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0195\21\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0196\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\22\41\1\275\10\41\22\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0197\25\41\2\0"+
    "\12\111\1\330\4\111\1\3\106\111\67\0\1\u0198\56\0"+
    "\10\333\173\0\1\u0199\126\0\1\u019a\16\0\1\u019b\112\0"+
    "\1\u019c\120\0\1\u019d\144\0\1\u019e\113\0\1\135\5\0"+
    "\1\135\125\0\1\u019f\112\0\1\u01a0\145\0\1\u01a1\117\0"+
    "\1\u01a2\1\0\1\u01a3\131\0\1\u019e\105\0\1\u019e\7\0"+
    "\1\u01a4\135\0\1\u01a5\115\0\1\135\7\0\1\u01a6\117\0"+
    "\1\135\110\0\1\u01a7\24\0\1\135\42\0\1\334\36\0"+
    "\1\u01a8\130\0\1\u01a9\1\0\1\u01aa\135\0\1\u01ab\2\0"+
    "\1\u01ac\104\0\1\u01ad\141\0\1\u01ae\132\0\1\u01af\112\0"+
    "\1\135\136\0\1\u01b0\2\0\1\135\106\0\1\135\123\0"+
    "\1\u01b1\132\0\1\u01b2\61\0\1\334\52\0\1\u01b3\120\0"+
    "\1\353\6\0\1\135\1\0\1\u01b3\127\0\1\u01b4\127\0"+
    "\1\135\122\0\1\u01b5\114\0\1\u01b6\137\0\1\u01b7\125\0"+
    "\1\u01b8\123\0\1\u01b9\106\0\1\u01ba\127\0\1\135\11\0"+
    "\1\u01bb\110\0\1\u01a0\140\0\1\u01bc\132\0\1\u01bd\106\0"+
    "\1\u01a3\10\0\1\u01b6\112\0\1\u01be\151\0\1\u01bf\101\0"+
    "\1\353\146\0\1\u01c0\6\0\1\u01c1\76\0\1\135\12\0"+
    "\1\u01c2\2\0\1\135\107\0\1\u01c1\142\0\1\344\123\0"+
    "\1\u01c3\12\0\1\u01c4\114\0\1\u01c5\51\0\1\334\41\0"+
    "\1\u01c6\135\0\1\u019e\6\0\1\u01c1\44\0\1\334\35\0"+
    "\1\u01c7\146\0\1\135\107\0\1\u01c8\50\0\10\41\5\0"+
    "\10\41\1\u0134\20\41\3\0\33\41\22\0\10\41\5\0"+
    "\14\41\1\u01c9\14\41\3\0\33\41\22\0\10\41\5\0"+
    "\22\41\1\27\6\41\3\0\33\41\22\0\10\41\5\0"+
    "\13\41\1\u01ca\15\41\3\0\33\41\22\0\10\41\5\0"+
    "\4\41\1\u01cb\24\41\3\0\33\41\22\0\10\41\5\0"+
    "\23\41\1\u01cc\5\41\3\0\33\41\22\0\10\41\5\0"+
    "\4\41\1\166\3\41\1\u01cd\20\41\3\0\33\41\22\0"+
    "\10\41\5\0\4\41\1\u01ce\24\41\3\0\33\41\22\0"+
    "\10\41\5\0\2\41\1\146\26\41\3\0\33\41\22\0"+
    "\10\41\5\0\23\41\1\166\5\41\3\0\33\41\22\0"+
    "\10\41\5\0\14\41\1\146\14\41\3\0\33\41\22\0"+
    "\10\41\5\0\13\41\1\146\15\41\3\0\33\41\22\0"+
    "\10\41\5\0\31\41\3\0\23\41\1\u012e\7\41\22\0"+
    "\10\41\5\0\16\41\1\166\12\41\3\0\33\41\22\0"+
    "\10\41\5\0\24\41\1\206\4\41\3\0\33\41\22\0"+
    "\10\41\5\0\10\41\1\u01cf\20\41\3\0\33\41\22\0"+
    "\10\41\5\0\4\41\1\u01d0\24\41\3\0\33\41\22\0"+
    "\10\41\5\0\4\41\1\u01d1\24\41\3\0\33\41\22\0"+
    "\10\41\5\0\16\41\1\146\12\41\3\0\33\41\22\0"+
    "\10\41\5\0\15\41\1\146\13\41\3\0\33\41\22\0"+
    "\10\41\5\0\23\41\1\146\5\41\3\0\33\41\22\0"+
    "\10\41\5\0\12\41\1\146\16\41\3\0\33\41\22\0"+
    "\10\41\5\0\17\41\1\166\11\41\3\0\33\41\22\0"+
    "\10\41\5\0\6\41\1\u01d2\22\41\3\0\33\41\22\0"+
    "\10\41\5\0\13\41\1\166\15\41\3\0\33\41\22\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\260\25\41\22\0"+
    "\10\41\5\0\15\41\1\u0129\13\41\3\0\33\41\22\0"+
    "\10\41\5\0\7\41\1\u0129\21\41\3\0\33\41\22\0"+
    "\10\41\5\0\13\41\1\u01d3\15\41\3\0\33\41\22\0"+
    "\10\41\5\0\4\41\1\u01d4\24\41\3\0\33\41\22\0"+
    "\10\41\5\0\4\41\1\u01d5\24\41\3\0\33\41\22\0"+
    "\10\41\5\0\15\41\1\166\13\41\3\0\33\41\22\0"+
    "\10\41\5\0\15\41\1\u01d6\13\41\3\0\33\41\22\0"+
    "\10\41\5\0\1\u01cb\30\41\3\0\33\41\22\0\10\41"+
    "\5\0\24\41\1\u01d7\4\41\3\0\33\41\22\0\10\41"+
    "\5\0\23\41\1\u01d8\5\41\3\0\33\41\22\0\10\41"+
    "\5\0\15\41\1\166\3\41\1\u01d2\7\41\3\0\33\41"+
    "\22\0\10\41\5\0\13\41\1\u01d9\15\41\3\0\33\41"+
    "\22\0\10\41\5\0\31\41\3\0\24\41\1\u01da\6\41"+
    "\22\0\10\41\5\0\31\41\3\0\7\41\1\u01db\23\41"+
    "\22\0\10\41\5\0\31\41\3\0\25\41\1\u01dc\5\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u01dd\31\41"+
    "\22\0\10\41\5\0\31\41\3\0\5\41\1\u01de\25\41"+
    "\22\0\10\41\5\0\31\41\3\0\16\41\1\u01df\14\41"+
    "\22\0\10\41\5\0\31\41\3\0\15\41\1\u01e0\15\41"+
    "\22\0\10\41\5\0\31\41\3\0\17\41\1\255\13\41"+
    "\22\0\10\41\5\0\31\41\3\0\11\41\1\262\21\41"+
    "\22\0\10\41\5\0\31\41\3\0\11\41\1\u0189\21\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u01e1\15\41"+
    "\1\251\13\41\22\0\10\41\5\0\31\41\3\0\14\41"+
    "\1\u01e2\16\41\22\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u01e3\31\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u016b\25\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\255\25\41\22\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\u01e4\27\41\22\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\u01e5\10\41\22\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u018a\7\41\22\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u01e6\20\41\1\u01e7\6\41\1\u01e8\1\41\22\0\10\41"+
    "\5\0\31\41\3\0\20\41\1\u01e9\12\41\22\0\10\41"+
    "\5\0\31\41\3\0\3\41\1\u01ea\17\41\1\u01eb\1\u01ec"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\25\41\1\u01ed"+
    "\5\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u01ee"+
    "\16\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u01ef"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u01f0"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\2\41\1\u0195"+
    "\30\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u01f1"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u01f2"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\6\41\1\260"+
    "\24\41\22\0\10\41\5\0\31\41\3\0\15\41\1\255"+
    "\15\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u016b"+
    "\16\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u01f3"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u01f4"+
    "\2\41\1\u0180\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u01f5\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\23\41\1\u0149\7\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\273\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u01f6\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u01f7\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u01e1\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\15\41\1\260\15\41\22\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u01f8\27\41\22\0\10\41\5\0\31\41\3\0"+
    "\2\41\1\u01f9\30\41\22\0\10\41\5\0\31\41\3\0"+
    "\14\41\1\u01fa\2\41\1\u01fb\13\41\22\0\10\41\5\0"+
    "\31\41\3\0\11\41\1\u01fc\21\41\22\0\10\41\5\0"+
    "\31\41\3\0\24\41\1\u01fd\6\41\22\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u01fe\25\41\22\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\270\25\41\22\0\10\41\5\0"+
    "\31\41\3\0\2\41\1\u01ff\30\41\22\0\10\41\5\0"+
    "\31\41\3\0\7\41\1\255\23\41\22\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u0154\31\41\22\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u0200\25\41\22\0\10\41\5\0"+
    "\31\41\3\0\11\41\1\u0201\21\41\22\0\10\41\5\0"+
    "\31\41\3\0\30\41\1\u0202\2\41\22\0\10\41\5\0"+
    "\31\41\3\0\14\41\1\u0203\16\41\22\0\10\41\5\0"+
    "\31\41\3\0\14\41\1\u0204\16\41\22\0\10\41\5\0"+
    "\31\41\3\0\22\41\1\u0205\10\41\22\0\10\41\5\0"+
    "\31\41\3\0\5\41\1\u0206\25\41\22\0\10\41\5\0"+
    "\31\41\3\0\13\41\1\u0207\17\41\22\0\10\41\5\0"+
    "\31\41\3\0\23\41\1\260\7\41\22\0\10\41\5\0"+
    "\31\41\3\0\26\41\1\u0208\4\41\22\0\10\41\5\0"+
    "\31\41\3\0\3\41\1\u0209\3\41\1\u020a\14\41\1\u020b"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u020c"+
    "\16\41\22\0\10\41\5\0\31\41\3\0\17\41\1\u020d"+
    "\13\41\22\0\10\41\5\0\31\41\3\0\11\41\1\u020e"+
    "\21\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u020f"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u0210"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\25\41\1\u0211"+
    "\5\41\22\0\10\41\5\0\31\41\3\0\25\41\1\u0212"+
    "\5\41\22\0\10\41\5\0\31\41\3\0\22\41\1\u01f7"+
    "\10\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u0213"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u0214"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\24\41\1\u0215"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\25\41\1\u0216"+
    "\5\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u0217"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\24\41\1\u014a"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\3\41\1\u0218"+
    "\27\41\22\0\10\41\5\0\31\41\3\0\20\41\1\u0219"+
    "\12\41\22\0\10\41\5\0\31\41\3\0\16\41\1\273"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\23\41\1\255"+
    "\7\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u021a"+
    "\11\41\1\u021b\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\16\41\1\u021c\14\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u021d\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\u021e\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u021f\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\270\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\24\41\1\u0220\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\4\41\1\255\26\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u0221\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u0222\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\14\41\1\u0149\16\41\22\0\10\41\5\0\31\41\3\0"+
    "\10\41\1\273\22\41\22\0\10\41\5\0\31\41\3\0"+
    "\14\41\1\u0223\16\41\14\0\1\111\226\0\1\u0224\104\0"+
    "\1\135\135\0\1\u0225\120\0\1\u019e\132\0\1\u0226\121\0"+
    "\1\135\123\0\1\u0227\153\0\1\135\120\0\1\u0228\127\0"+
    "\1\u0229\123\0\1\u022a\44\0\1\334\43\0\1\u022b\117\0"+
    "\1\u022c\125\0\1\u022d\140\0\1\u022e\116\0\1\365\134\0"+
    "\1\u022f\114\0\1\u0230\21\0\1\u0231\124\0\1\u0232\116\0"+
    "\1\135\114\0\1\u0233\135\0\1\135\112\0\1\u0234\151\0"+
    "\1\u0235\105\0\1\u01ae\125\0\1\u0236\133\0\1\135\113\0"+
    "\1\135\3\0\1\u0113\123\0\1\u0105\127\0\1\u0237\127\0"+
    "\1\u022b\1\0\1\u0228\134\0\1\u01b0\106\0\1\u01ac\150\0"+
    "\1\u0238\110\0\1\u0199\136\0\1\135\116\0\1\u0239\130\0"+
    "\1\u01ae\133\0\1\u023a\122\0\1\u023b\122\0\1\u019e\126\0"+
    "\1\u023c\130\0\1\u023d\131\0\1\u023e\120\0\1\u0235\107\0"+
    "\1\365\127\0\1\u01b3\127\0\1\u0226\47\0\10\41\5\0"+
    "\10\41\1\u0129\20\41\3\0\33\41\22\0\10\41\5\0"+
    "\1\u023f\30\41\3\0\33\41\22\0\10\41\5\0\23\41"+
    "\1\u01d2\5\41\3\0\33\41\22\0\10\41\5\0\10\41"+
    "\1\u0240\20\41\3\0\33\41\22\0\10\41\5\0\5\41"+
    "\1\166\23\41\3\0\33\41\22\0\10\41\5\0\17\41"+
    "\1\u0241\11\41\3\0\33\41\22\0\10\41\5\0\15\41"+
    "\1\u0242\13\41\3\0\33\41\22\0\10\41\5\0\21\41"+
    "\1\146\7\41\3\0\33\41\22\0\10\41\5\0\21\41"+
    "\1\u0129\7\41\3\0\33\41\22\0\10\41\5\0\4\41"+
    "\1\146\24\41\3\0\33\41\22\0\10\41\5\0\1\41"+
    "\1\u0243\27\41\3\0\33\41\22\0\10\41\5\0\17\41"+
    "\1\u0244\11\41\3\0\33\41\22\0\10\41\5\0\2\41"+
    "\1\u0129\26\41\3\0\33\41\22\0\10\41\5\0\22\41"+
    "\1\u0245\6\41\3\0\33\41\22\0\10\41\5\0\4\41"+
    "\1\27\24\41\3\0\33\41\22\0\10\41\5\0\5\41"+
    "\1\u0246\23\41\3\0\33\41\22\0\10\41\5\0\4\41"+
    "\1\166\24\41\3\0\33\41\22\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u0247\10\41\22\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0248\14\41\22\0\10\41\5\0\31\41"+
    "\3\0\15\41\1\u0249\15\41\22\0\10\41\5\0\31\41"+
    "\3\0\31\41\1\273\1\41\22\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u024a\10\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\260\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u024b\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0192\14\41\22\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u024c\25\41\22\0\10\41\5\0\31\41"+
    "\3\0\13\41\1\255\17\41\22\0\10\41\5\0\31\41"+
    "\3\0\10\41\1\255\22\41\22\0\1\41\1\u024d\1\41"+
    "\1\u024e\3\41\1\u024f\5\0\31\41\3\0\33\41\22\0"+
    "\10\41\5\0\31\41\3\0\27\41\1\u0250\3\41\22\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0251\25\41\22\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0252\21\41\22\0"+
    "\10\41\5\0\31\41\3\0\14\41\1\255\16\41\22\0"+
    "\10\41\5\0\31\41\3\0\5\41\1\u0253\25\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0254\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u0255\21\41\22\0"+
    "\10\41\5\0\31\41\3\0\7\41\1\u0256\23\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0257\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\25\41\1\u0258\5\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0149\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\24\41\1\u0259\6\41\22\0"+
    "\10\41\5\0\31\41\3\0\15\41\1\u025a\15\41\22\0"+
    "\10\41\5\0\31\41\3\0\20\41\1\u024a\12\41\22\0"+
    "\10\41\5\0\31\41\3\0\11\41\1\u025b\21\41\22\0"+
    "\10\41\5\0\31\41\3\0\16\41\1\u025c\3\41\1\u021e"+
    "\10\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u025d"+
    "\16\41\22\0\10\41\5\0\31\41\3\0\24\41\1\255"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\24\41\1\u025e"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u025f"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u01dc"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\22\41\1\262"+
    "\10\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u0149"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u0260"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\22\41\1\u0261"+
    "\10\41\22\0\10\41\5\0\31\41\3\0\4\41\1\u0262"+
    "\26\41\22\0\10\41\5\0\31\41\3\0\23\41\1\u0263"+
    "\7\41\22\0\10\41\5\0\31\41\3\0\26\41\1\u0148"+
    "\4\41\22\0\10\41\5\0\31\41\3\0\3\41\1\u01ea"+
    "\27\41\22\0\10\41\5\0\31\41\3\0\17\41\1\u0264"+
    "\13\41\22\0\10\41\5\0\31\41\3\0\20\41\1\u0265"+
    "\12\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u0266"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\21\41\1\255"+
    "\11\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u0267"+
    "\3\41\1\264\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u01f0\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u0268\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\u0269\10\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u026a\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u026b\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\264\10\41\22\0\10\41\5\0\31\41\3\0"+
    "\23\41\1\u026c\7\41\22\0\10\41\5\0\31\41\3\0"+
    "\24\41\1\u026d\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\303\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u026e\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\u021e\10\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u0192\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\u026f\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\11\41\1\u0270\21\41\22\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u01f7\27\41\22\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\u016b\10\41\22\0\10\41\5\0\31\41\3\0"+
    "\10\41\1\u0271\22\41\22\0\10\41\5\0\31\41\3\0"+
    "\14\41\1\u0208\16\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u0272\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\27\41\1\u0273\3\41\22\0\10\41\5\0\31\41\3\0"+
    "\23\41\1\u0274\7\41\22\0\10\41\5\0\31\41\3\0"+
    "\4\41\1\u0275\4\41\1\u0192\4\41\1\u0276\1\u0277\13\41"+
    "\22\0\10\41\5\0\31\41\3\0\16\41\1\255\14\41"+
    "\22\0\10\41\5\0\31\41\3\0\7\41\1\u0181\23\41"+
    "\22\0\10\41\5\0\31\41\3\0\25\41\1\u0278\5\41"+
    "\22\0\10\41\5\0\31\41\3\0\24\41\1\324\6\41"+
    "\22\0\10\41\5\0\31\41\3\0\22\41\1\u024f\10\41"+
    "\22\0\10\41\5\0\31\41\3\0\4\41\1\u016b\26\41"+
    "\100\0\1\u0279\123\0\1\u01c1\141\0\1\135\121\0\1\u027a"+
    "\131\0\1\353\107\0\1\u027b\135\0\1\u0228\136\0\1\u027c"+
    "\46\0\1\334\50\0\1\u027d\122\0\1\u027e\133\0\1\363"+
    "\112\0\1\u027f\122\0\1\u0280\146\0\1\u019e\110\0\1\u0113"+
    "\63\0\1\334\41\0\1\u0113\135\0\1\u019e\134\0\1\135"+
    "\117\0\1\365\112\0\1\u0235\147\0\1\u0231\120\0\1\u0235"+
    "\110\0\1\u019e\140\0\1\363\110\0\1\u0281\140\0\1\u0282"+
    "\112\0\1\u0283\53\0\10\41\5\0\21\41\1\u01d9\7\41"+
    "\3\0\33\41\22\0\10\41\5\0\15\41\1\u01d5\13\41"+
    "\3\0\33\41\22\0\10\41\5\0\23\41\1\u0284\5\41"+
    "\3\0\33\41\22\0\10\41\5\0\6\41\1\146\22\41"+
    "\3\0\33\41\22\0\10\41\5\0\1\u0285\30\41\3\0"+
    "\33\41\22\0\10\41\5\0\16\41\1\200\12\41\3\0"+
    "\33\41\22\0\10\41\5\0\1\u0286\30\41\3\0\33\41"+
    "\22\0\10\41\5\0\16\41\1\u01d0\12\41\3\0\33\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u0287\31\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u018a\15\41"+
    "\1\u026f\13\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u0288\25\41\22\0\10\41\5\0\31\41\3\0\24\41"+
    "\1\260\6\41\22\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\u0289\27\41\22\0\10\41\5\0\31\41\3\0\1\41"+
    "\1\u028a\31\41\22\0\5\41\1\u024f\2\41\5\0\31\41"+
    "\3\0\33\41\22\0\2\41\1\u024f\5\41\5\0\31\41"+
    "\3\0\33\41\22\0\10\41\5\0\31\41\3\0\1\u01f7"+
    "\32\41\22\0\10\41\5\0\31\41\3\0\1\41\1\u028b"+
    "\31\41\22\0\10\41\5\0\31\41\3\0\24\41\1\u017f"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u028c"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\20\41\1\u01f7"+
    "\12\41\22\0\10\41\5\0\31\41\3\0\1\u028d\4\41"+
    "\1\u028e\3\41\1\u028f\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0290\14\41\22\0\10\41\5\0\31\41"+
    "\3\0\7\41\1\u0185\23\41\22\0\10\41\5\0\31\41"+
    "\3\0\31\41\1\u0291\1\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u01f7\16\41\22\0\10\41\5\0\31\41"+
    "\3\0\17\41\1\273\13\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0292\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u028b\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\4\41\1\u0293\26\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\u0294\16\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u0295\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\14\41\1\260\16\41\22\0\10\41\5\0\31\41"+
    "\3\0\16\41\1\u0296\14\41\22\0\10\41\5\0\31\41"+
    "\3\0\6\41\1\u0297\24\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\260\31\41\22\0\10\41\5\0\31\41"+
    "\3\0\20\41\1\u0298\12\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u01f9\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\251\6\41\22\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u0299\6\41\22\0\10\41\5\0\31\41"+
    "\3\0\7\41\1\u0148\23\41\22\0\10\41\5\0\31\41"+
    "\3\0\4\41\1\u029a\26\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u029b\31\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u029c\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\255\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\24\41\1\u029d\6\41\22\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u029e\25\41\22\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u029f\10\41\22\0\10\41\5\0\31\41"+
    "\3\0\6\41\1\255\24\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u02a0\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u02a1\10\41\22\0\10\41\5\0\31\41"+
    "\3\0\4\41\1\u02a2\26\41\22\0\10\41\5\0\31\41"+
    "\3\0\23\41\1\u016b\7\41\22\0\10\41\5\0\31\41"+
    "\3\0\11\41\1\u02a3\21\41\22\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u026f\25\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u02a4\31\41\22\0\10\41\5\0\31\41"+
    "\3\0\6\41\1\u016b\24\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u01e9\31\41\116\0\1\u027b\123\0\1\u02a5"+
    "\127\0\1\135\121\0\1\u02a6\117\0\1\u02a7\130\0\1\u027b"+
    "\134\0\1\u02a8\122\0\1\u01a3\127\0\1\u01a0\104\0\1\347"+
    "\146\0\1\u02a9\32\0\10\41\5\0\10\41\1\u02aa\20\41"+
    "\3\0\33\41\22\0\10\41\5\0\2\41\1\u012a\26\41"+
    "\3\0\33\41\22\0\10\41\5\0\2\41\1\u02ab\26\41"+
    "\3\0\33\41\22\0\10\41\5\0\31\41\3\0\3\41"+
    "\1\262\27\41\22\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\u02ac\14\41\22\0\10\41\5\0\31\41\3\0\1\u02ad"+
    "\32\41\22\0\10\41\5\0\31\41\3\0\16\41\1\u016b"+
    "\14\41\22\0\10\41\5\0\31\41\3\0\11\41\1\u01f7"+
    "\21\41\22\0\10\41\5\0\31\41\3\0\14\41\1\u0192"+
    "\16\41\22\0\10\41\5\0\31\41\3\0\3\41\1\u02ae"+
    "\27\41\22\0\10\41\5\0\31\41\3\0\26\41\1\u0278"+
    "\1\41\1\u02af\2\41\22\0\10\41\5\0\31\41\3\0"+
    "\16\41\1\u028b\14\41\22\0\10\41\5\0\31\41\3\0"+
    "\25\41\1\u0149\5\41\22\0\10\41\5\0\31\41\3\0"+
    "\20\41\1\u0149\12\41\22\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u02b0\27\41\22\0\10\41\5\0\31\41\3\0"+
    "\31\41\1\u016b\1\41\22\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\u0189\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u02b1\27\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u02b2\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\41\1\u02b3\31\41\22\0\10\41\5\0\31\41\3\0"+
    "\17\41\1\251\13\41\22\0\10\41\5\0\31\41\3\0"+
    "\25\41\1\u02b4\5\41\22\0\10\41\5\0\31\41\3\0"+
    "\15\41\1\273\15\41\22\0\10\41\5\0\31\41\3\0"+
    "\24\41\1\u0213\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\251\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\22\41\1\u02b5\10\41\22\0\10\41\5\0\31\41\3\0"+
    "\5\41\1\u018a\25\41\22\0\10\41\5\0\31\41\3\0"+
    "\1\u02b6\32\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u02b7\13\41\22\0\10\41\5\0\31\41\3\0\1\u02b8"+
    "\32\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u02b9"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\15\41\1\u0149"+
    "\15\41\120\0\1\u02ba\125\0\1\u01bc\123\0\1\u0235\107\0"+
    "\1\u0235\125\0\1\u019a\47\0\10\41\5\0\16\41\1\u0134"+
    "\12\41\3\0\33\41\22\0\10\41\5\0\23\41\1\u02bb"+
    "\5\41\3\0\33\41\22\0\10\41\5\0\31\41\3\0"+
    "\24\41\1\u0293\6\41\22\0\10\41\5\0\31\41\3\0"+
    "\3\41\1\u02bc\12\41\1\u02bd\14\41\22\0\10\41\5\0"+
    "\31\41\3\0\1\41\1\u02be\31\41\22\0\10\41\5\0"+
    "\31\41\3\0\20\41\1\251\12\41\22\0\10\41\5\0"+
    "\31\41\3\0\1\u028d\32\41\22\0\10\41\5\0\31\41"+
    "\3\0\5\41\1\u02bf\25\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u0148\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\3\41\1\u0149\27\41\22\0\10\41\5\0\31\41"+
    "\3\0\22\41\1\u015e\10\41\22\0\10\41\5\0\31\41"+
    "\3\0\20\41\1\u02c0\12\41\22\0\10\41\5\0\31\41"+
    "\3\0\1\41\1\u02c1\1\41\1\u02ae\27\41\22\0\10\41"+
    "\5\0\31\41\3\0\16\41\1\u02c2\14\41\22\0\10\41"+
    "\5\0\31\41\3\0\14\41\1\u02c3\16\41\22\0\10\41"+
    "\5\0\31\41\3\0\16\41\1\262\14\41\112\0\1\347"+
    "\35\0\10\41\5\0\10\41\1\u02c4\20\41\3\0\33\41"+
    "\22\0\10\41\5\0\31\41\3\0\1\41\1\u02c5\15\41"+
    "\1\u02c6\13\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u02c7\13\41\22\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u01f7\7\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u0277\13\41\22\0\10\41\5\0\31\41\3\0\22\41"+
    "\1\u02c8\10\41\22\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u02c9\7\41\22\0\10\41\5\0\31\41\3\0\11\41"+
    "\1\u02ca\21\41\22\0\10\41\5\0\31\41\3\0\17\41"+
    "\1\u02cb\13\41\22\0\10\41\5\0\16\41\1\u0128\12\41"+
    "\3\0\33\41\22\0\10\41\5\0\31\41\3\0\16\41"+
    "\1\u02cc\14\41\22\0\10\41\5\0\31\41\3\0\15\41"+
    "\1\u02cd\15\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u0170\25\41\22\0\10\41\5\0\31\41\3\0\5\41"+
    "\1\u02ce\25\41\22\0\10\41\5\0\31\41\3\0\23\41"+
    "\1\u02cf\7\41\22\0\10\41\5\0\31\41\3\0\32\41"+
    "\1\u0213\22\0\10\41\5\0\31\41\3\0\3\41\1\u0278"+
    "\27\41\22\0\10\41\5\0\31\41\3\0\3\41\1\u02d0"+
    "\27\41\22\0\10\41\5\0\31\41\3\0\15\41\1\u028b"+
    "\15\41\22\0\10\41\5\0\31\41\3\0\24\41\1\u02b0"+
    "\6\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u0180"+
    "\25\41\22\0\10\41\5\0\31\41\3\0\5\41\1\u01e9"+
    "\25\41\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59426];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\5\11\1\1\1\11\1\1\1\11"+
    "\3\1\2\11\31\1\2\11\25\1\5\11\1\0\1\1"+
    "\3\0\1\11\25\0\2\11\162\1\2\0\1\11\1\1"+
    "\1\11\70\0\203\1\61\0\133\1\33\0\72\1\13\0"+
    "\41\1\5\0\20\1\1\0\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[720];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return token(yytext(), "ERROR", yyline, yycolumn);
            }
            // fall through
          case 38: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 39: break;
          case 3:
            { return token(yytext(), "COMILLADOBLE", yyline, yycolumn);
            }
            // fall through
          case 40: break;
          case 4:
            { return token(yytext(), "COMILLASIMPLE", yyline, yycolumn);
            }
            // fall through
          case 41: break;
          case 5:
            { return token(yytext(), "PARENTESISABIERTO", yyline, yycolumn);
            }
            // fall through
          case 42: break;
          case 6:
            { return token(yytext(), "PARENTESISCERRADO", yyline, yycolumn);
            }
            // fall through
          case 43: break;
          case 7:
            { return token(yytext(), "MULTIPLICACION", yyline, yycolumn);
            }
            // fall through
          case 44: break;
          case 8:
            { return token(yytext(), "SUMA", yyline, yycolumn);
            }
            // fall through
          case 45: break;
          case 9:
            { return token(yytext(), "COMA", yyline, yycolumn);
            }
            // fall through
          case 46: break;
          case 10:
            { return token(yytext(), "RESTA", yyline, yycolumn);
            }
            // fall through
          case 47: break;
          case 11:
            { return token(yytext(), "PUNTO", yyline, yycolumn);
            }
            // fall through
          case 48: break;
          case 12:
            { return token(yytext(), "DIVISION", yyline, yycolumn);
            }
            // fall through
          case 49: break;
          case 13:
            { return token(yytext(), "NUMERO", yyline, yycolumn);
            }
            // fall through
          case 50: break;
          case 14:
            { return token(yytext(), "DOSPUNTOS", yyline, yycolumn);
            }
            // fall through
          case 51: break;
          case 15:
            { return token(yytext(), "PUNTOCOMA", yyline, yycolumn);
            }
            // fall through
          case 52: break;
          case 16:
            { return token(yytext(), "MENORQUE", yyline, yycolumn);
            }
            // fall through
          case 53: break;
          case 17:
            { return token(yytext(), "ASIGNACION", yyline, yycolumn);
            }
            // fall through
          case 54: break;
          case 18:
            { return token(yytext(), "MAYORQUE", yyline, yycolumn);
            }
            // fall through
          case 55: break;
          case 19:
            { return token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
            }
            // fall through
          case 56: break;
          case 20:
            { return token(yytext(), "CORCHETEABIERTO", yyline, yycolumn);
            }
            // fall through
          case 57: break;
          case 21:
            { return token(yytext(), "CORCHETECERRADO", yyline, yycolumn);
            }
            // fall through
          case 58: break;
          case 22:
            { return token(yytext(), "LLAVEABIERTA", yyline, yycolumn);
            }
            // fall through
          case 59: break;
          case 23:
            { return token(yytext(), "LLAVECERRADA", yyline, yycolumn);
            }
            // fall through
          case 60: break;
          case 24:
            { return token(yytext(), "DIFERENTE", yyline, yycolumn);
            }
            // fall through
          case 61: break;
          case 25:
            { return token(yytext(), "INCREMENTO", yyline, yycolumn);
            }
            // fall through
          case 62: break;
          case 26:
            { return token(yytext(), "DECREMENTO", yyline, yycolumn);
            }
            // fall through
          case 63: break;
          case 27:
            { return token(yytext(), "MENORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 64: break;
          case 28:
            { return token(yytext(), "IGUAL", yyline, yycolumn);
            }
            // fall through
          case 65: break;
          case 29:
            { return token(yytext(), "MAYORIGUALQUE", yyline, yycolumn);
            }
            // fall through
          case 66: break;
          case 30:
            { return token(yytext(), "TSQL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 67: break;
          case 31:
            { return token(yytext(), "PLSQL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 68: break;
          case 32:
            { return token(yytext(), "PYTHON_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 69: break;
          case 33:
            { return token(yytext(), "C++_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 70: break;
          case 34:
            { return token(yytext(), "PASCAL_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 71: break;
          case 35:
            { return token(yytext(), "REAL", yyline, yycolumn);
            }
            // fall through
          case 72: break;
          case 36:
            { return token(yytext(), "HTML_TAG", yyline, yycolumn);
            }
            // fall through
          case 73: break;
          case 37:
            { return token(yytext(), "JS_KEYWORD", yyline, yycolumn);
            }
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
